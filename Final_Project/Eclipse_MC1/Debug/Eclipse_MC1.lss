
Eclipse_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  00002e16  00002e8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002820  00000000  00000000  00002f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001166  00000000  00000000  00005780  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000068e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000087df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000096ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a865  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b033  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e2       	ldi	r26, 0x24	; 36
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	84 e2       	ldi	r24, 0x24	; 36
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:

void enter_password(uint8 *Str, uint8 *Str2);
void get_password(uint8 *Str);


int main(void) {
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c8 59       	subi	r28, 0x98	; 152
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_ConfigType uart_config={_8Bit,Disabled,_1bit,9600};
     b50:	ce 01       	movw	r24, r28
     b52:	86 59       	subi	r24, 0x96	; 150
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	cc 56       	subi	r28, 0x6C	; 108
     b58:	df 4f       	sbci	r29, 0xFF	; 255
     b5a:	99 83       	std	Y+1, r25	; 0x01
     b5c:	88 83       	st	Y, r24
     b5e:	c4 59       	subi	r28, 0x94	; 148
     b60:	d0 40       	sbci	r29, 0x00	; 0
     b62:	8c e2       	ldi	r24, 0x2C	; 44
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	ca 56       	subi	r28, 0x6A	; 106
     b68:	df 4f       	sbci	r29, 0xFF	; 255
     b6a:	99 83       	std	Y+1, r25	; 0x01
     b6c:	88 83       	st	Y, r24
     b6e:	c6 59       	subi	r28, 0x96	; 150
     b70:	d0 40       	sbci	r29, 0x00	; 0
     b72:	97 e0       	ldi	r25, 0x07	; 7
     b74:	c8 56       	subi	r28, 0x68	; 104
     b76:	df 4f       	sbci	r29, 0xFF	; 255
     b78:	98 83       	st	Y, r25
     b7a:	c8 59       	subi	r28, 0x98	; 152
     b7c:	d0 40       	sbci	r29, 0x00	; 0
     b7e:	ca 56       	subi	r28, 0x6A	; 106
     b80:	df 4f       	sbci	r29, 0xFF	; 255
     b82:	e8 81       	ld	r30, Y
     b84:	f9 81       	ldd	r31, Y+1	; 0x01
     b86:	c6 59       	subi	r28, 0x96	; 150
     b88:	d0 40       	sbci	r29, 0x00	; 0
     b8a:	00 80       	ld	r0, Z
     b8c:	ca 56       	subi	r28, 0x6A	; 106
     b8e:	df 4f       	sbci	r29, 0xFF	; 255
     b90:	88 81       	ld	r24, Y
     b92:	99 81       	ldd	r25, Y+1	; 0x01
     b94:	c6 59       	subi	r28, 0x96	; 150
     b96:	d0 40       	sbci	r29, 0x00	; 0
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	ca 56       	subi	r28, 0x6A	; 106
     b9c:	df 4f       	sbci	r29, 0xFF	; 255
     b9e:	99 83       	std	Y+1, r25	; 0x01
     ba0:	88 83       	st	Y, r24
     ba2:	c6 59       	subi	r28, 0x96	; 150
     ba4:	d0 40       	sbci	r29, 0x00	; 0
     ba6:	cc 56       	subi	r28, 0x6C	; 108
     ba8:	df 4f       	sbci	r29, 0xFF	; 255
     baa:	e8 81       	ld	r30, Y
     bac:	f9 81       	ldd	r31, Y+1	; 0x01
     bae:	c4 59       	subi	r28, 0x94	; 148
     bb0:	d0 40       	sbci	r29, 0x00	; 0
     bb2:	00 82       	st	Z, r0
     bb4:	cc 56       	subi	r28, 0x6C	; 108
     bb6:	df 4f       	sbci	r29, 0xFF	; 255
     bb8:	88 81       	ld	r24, Y
     bba:	99 81       	ldd	r25, Y+1	; 0x01
     bbc:	c4 59       	subi	r28, 0x94	; 148
     bbe:	d0 40       	sbci	r29, 0x00	; 0
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	cc 56       	subi	r28, 0x6C	; 108
     bc4:	df 4f       	sbci	r29, 0xFF	; 255
     bc6:	99 83       	std	Y+1, r25	; 0x01
     bc8:	88 83       	st	Y, r24
     bca:	c4 59       	subi	r28, 0x94	; 148
     bcc:	d0 40       	sbci	r29, 0x00	; 0
     bce:	c8 56       	subi	r28, 0x68	; 104
     bd0:	df 4f       	sbci	r29, 0xFF	; 255
     bd2:	98 81       	ld	r25, Y
     bd4:	c8 59       	subi	r28, 0x98	; 152
     bd6:	d0 40       	sbci	r29, 0x00	; 0
     bd8:	91 50       	subi	r25, 0x01	; 1
     bda:	c8 56       	subi	r28, 0x68	; 104
     bdc:	df 4f       	sbci	r29, 0xFF	; 255
     bde:	98 83       	st	Y, r25
     be0:	c8 59       	subi	r28, 0x98	; 152
     be2:	d0 40       	sbci	r29, 0x00	; 0
     be4:	c8 56       	subi	r28, 0x68	; 104
     be6:	df 4f       	sbci	r29, 0xFF	; 255
     be8:	e8 81       	ld	r30, Y
     bea:	c8 59       	subi	r28, 0x98	; 152
     bec:	d0 40       	sbci	r29, 0x00	; 0
     bee:	ee 23       	and	r30, r30
     bf0:	31 f6       	brne	.-116    	; 0xb7e <main+0x48>
	UART_init(&uart_config);
     bf2:	ce 01       	movw	r24, r28
     bf4:	86 59       	subi	r24, 0x96	; 150
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	0e 94 84 15 	call	0x2b08	; 0x2b08 <UART_init>
	LCD_init();
     bfc:	0e 94 c8 10 	call	0x2190	; 0x2190 <LCD_init>
	uint8 state = 1;
     c00:	fe 01       	movw	r30, r28
     c02:	e7 59       	subi	r30, 0x97	; 151
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 83       	st	Z, r24

	while (1) {
		if (state == 1) //enter new password
     c0a:	fe 01       	movw	r30, r28
     c0c:	e7 59       	subi	r30, 0x97	; 151
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	80 81       	ld	r24, Z
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	09 f0       	breq	.+2      	; 0xc18 <main+0xe2>
     c16:	4b c2       	rjmp	.+1174   	; 0x10ae <main+0x578>
				{
			uint8 a_pass[7];
			uint8 a_pass2[7];
			uint8 a_pass3[7];
			uint8 a_rec;
			enter_password(a_pass, "Enter new pass");
     c18:	ce 01       	movw	r24, r28
     c1a:	8f 58       	subi	r24, 0x8F	; 143
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	20 e6       	ldi	r18, 0x60	; 96
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	b9 01       	movw	r22, r18
     c24:	0e 94 32 0b 	call	0x1664	; 0x1664 <enter_password>
			LCD_clearScreen();
     c28:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
			enter_password(a_pass2, "Re-enter pass");
     c2c:	ce 01       	movw	r24, r28
     c2e:	88 58       	subi	r24, 0x88	; 136
     c30:	9f 4f       	sbci	r25, 0xFF	; 255
     c32:	2f e6       	ldi	r18, 0x6F	; 111
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	b9 01       	movw	r22, r18
     c38:	0e 94 32 0b 	call	0x1664	; 0x1664 <enter_password>
			LCD_clearScreen();
     c3c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
			if (strcmp(a_pass, a_pass2) == 0) //Match
     c40:	ce 01       	movw	r24, r28
     c42:	8f 58       	subi	r24, 0x8F	; 143
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	9e 01       	movw	r18, r28
     c48:	28 58       	subi	r18, 0x88	; 136
     c4a:	3f 4f       	sbci	r19, 0xFF	; 255
     c4c:	b9 01       	movw	r22, r18
     c4e:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <strcmp>
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	09 f0       	breq	.+2      	; 0xc58 <main+0x122>
     c56:	9a c1       	rjmp	.+820    	; 0xf8c <main+0x456>
					{
				UART_sendByte(add_pass); //anounnce state to mc2
     c58:	87 e3       	ldi	r24, 0x37	; 55
     c5a:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
				strcpy(a_pass3, a_pass);
     c5e:	ce 01       	movw	r24, r28
     c60:	81 58       	subi	r24, 0x81	; 129
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	9e 01       	movw	r18, r28
     c66:	2f 58       	subi	r18, 0x8F	; 143
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	b9 01       	movw	r22, r18
     c6c:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <strcpy>
				LCD_displayString("Match");
     c70:	8d e7       	ldi	r24, 0x7D	; 125
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
				UART_sendString(a_pass3);
     c78:	ce 01       	movw	r24, r28
     c7a:	81 58       	subi	r24, 0x81	; 129
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <UART_sendString>
     c82:	fe 01       	movw	r30, r28
     c84:	e1 5a       	subi	r30, 0xA1	; 161
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e2       	ldi	r26, 0x20	; 32
     c8e:	b1 e4       	ldi	r27, 0x41	; 65
     c90:	80 83       	st	Z, r24
     c92:	91 83       	std	Z+1, r25	; 0x01
     c94:	a2 83       	std	Z+2, r26	; 0x02
     c96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c98:	8e 01       	movw	r16, r28
     c9a:	05 5a       	subi	r16, 0xA5	; 165
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	fe 01       	movw	r30, r28
     ca0:	e1 5a       	subi	r30, 0xA1	; 161
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	4a ef       	ldi	r20, 0xFA	; 250
     cb2:	54 e4       	ldi	r21, 0x44	; 68
     cb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	f8 01       	movw	r30, r16
     cbe:	80 83       	st	Z, r24
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	a2 83       	std	Z+2, r26	; 0x02
     cc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cc6:	fe 01       	movw	r30, r28
     cc8:	e5 5a       	subi	r30, 0xA5	; 165
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	60 81       	ld	r22, Z
     cce:	71 81       	ldd	r23, Z+1	; 0x01
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	93 81       	ldd	r25, Z+3	; 0x03
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e8       	ldi	r20, 0x80	; 128
     cda:	5f e3       	ldi	r21, 0x3F	; 63
     cdc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ce0:	88 23       	and	r24, r24
     ce2:	44 f4       	brge	.+16     	; 0xcf4 <main+0x1be>
		__ticks = 1;
     ce4:	fe 01       	movw	r30, r28
     ce6:	e7 5a       	subi	r30, 0xA7	; 167
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	80 83       	st	Z, r24
     cf2:	64 c0       	rjmp	.+200    	; 0xdbc <main+0x286>
	else if (__tmp > 65535)
     cf4:	fe 01       	movw	r30, r28
     cf6:	e5 5a       	subi	r30, 0xA5	; 165
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	60 81       	ld	r22, Z
     cfc:	71 81       	ldd	r23, Z+1	; 0x01
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	3f ef       	ldi	r19, 0xFF	; 255
     d06:	4f e7       	ldi	r20, 0x7F	; 127
     d08:	57 e4       	ldi	r21, 0x47	; 71
     d0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d0e:	18 16       	cp	r1, r24
     d10:	0c f0       	brlt	.+2      	; 0xd14 <main+0x1de>
     d12:	43 c0       	rjmp	.+134    	; 0xd9a <main+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d14:	fe 01       	movw	r30, r28
     d16:	e1 5a       	subi	r30, 0xA1	; 161
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e2       	ldi	r20, 0x20	; 32
     d28:	51 e4       	ldi	r21, 0x41	; 65
     d2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	8e 01       	movw	r16, r28
     d34:	07 5a       	subi	r16, 0xA7	; 167
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	f8 01       	movw	r30, r16
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24
     d4a:	1f c0       	rjmp	.+62     	; 0xd8a <main+0x254>
     d4c:	fe 01       	movw	r30, r28
     d4e:	e9 5a       	subi	r30, 0xA9	; 169
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	91 83       	std	Z+1, r25	; 0x01
     d58:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d5a:	fe 01       	movw	r30, r28
     d5c:	e9 5a       	subi	r30, 0xA9	; 169
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	80 81       	ld	r24, Z
     d62:	91 81       	ldd	r25, Z+1	; 0x01
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <main+0x22e>
     d68:	fe 01       	movw	r30, r28
     d6a:	e9 5a       	subi	r30, 0xA9	; 169
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d72:	de 01       	movw	r26, r28
     d74:	a7 5a       	subi	r26, 0xA7	; 167
     d76:	bf 4f       	sbci	r27, 0xFF	; 255
     d78:	fe 01       	movw	r30, r28
     d7a:	e7 5a       	subi	r30, 0xA7	; 167
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	11 96       	adiw	r26, 0x01	; 1
     d86:	9c 93       	st	X, r25
     d88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8a:	fe 01       	movw	r30, r28
     d8c:	e7 5a       	subi	r30, 0xA7	; 167
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	d1 f6       	brne	.-76     	; 0xd4c <main+0x216>
     d98:	27 c0       	rjmp	.+78     	; 0xde8 <main+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9a:	8e 01       	movw	r16, r28
     d9c:	07 5a       	subi	r16, 0xA7	; 167
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	fe 01       	movw	r30, r28
     da2:	e5 5a       	subi	r30, 0xA5	; 165
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	82 81       	ldd	r24, Z+2	; 0x02
     dac:	93 81       	ldd	r25, Z+3	; 0x03
     dae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	f8 01       	movw	r30, r16
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	80 83       	st	Z, r24
     dbc:	de 01       	movw	r26, r28
     dbe:	ab 5a       	subi	r26, 0xAB	; 171
     dc0:	bf 4f       	sbci	r27, 0xFF	; 255
     dc2:	fe 01       	movw	r30, r28
     dc4:	e7 5a       	subi	r30, 0xA7	; 167
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	8d 93       	st	X+, r24
     dce:	9c 93       	st	X, r25
     dd0:	fe 01       	movw	r30, r28
     dd2:	eb 5a       	subi	r30, 0xAB	; 171
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 81       	ld	r24, Z
     dd8:	91 81       	ldd	r25, Z+1	; 0x01
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <main+0x2a4>
     dde:	fe 01       	movw	r30, r28
     de0:	eb 5a       	subi	r30, 0xAB	; 171
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	80 83       	st	Z, r24
				_delay_ms(10);
				a_rec = UART_recieveByte();
     de8:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
     dec:	fe 01       	movw	r30, r28
     dee:	e8 59       	subi	r30, 0x98	; 152
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	80 83       	st	Z, r24
				LCD_displayString("s");
     df4:	83 e8       	ldi	r24, 0x83	; 131
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
				if (a_rec == rec_pass)
     dfc:	fe 01       	movw	r30, r28
     dfe:	e8 59       	subi	r30, 0x98	; 152
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 81       	ld	r24, Z
     e04:	82 34       	cpi	r24, 0x42	; 66
     e06:	09 f0       	breq	.+2      	; 0xe0a <main+0x2d4>
     e08:	00 cf       	rjmp	.-512    	; 0xc0a <main+0xd4>
				{
					LCD_clearScreen();
     e0a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
					LCD_displayString("Saved");
     e0e:	85 e8       	ldi	r24, 0x85	; 133
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
     e16:	fe 01       	movw	r30, r28
     e18:	ef 5a       	subi	r30, 0xAF	; 175
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	aa ef       	ldi	r26, 0xFA	; 250
     e22:	b3 e4       	ldi	r27, 0x43	; 67
     e24:	80 83       	st	Z, r24
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	a2 83       	std	Z+2, r26	; 0x02
     e2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e2c:	8e 01       	movw	r16, r28
     e2e:	03 5b       	subi	r16, 0xB3	; 179
     e30:	1f 4f       	sbci	r17, 0xFF	; 255
     e32:	fe 01       	movw	r30, r28
     e34:	ef 5a       	subi	r30, 0xAF	; 175
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	82 81       	ldd	r24, Z+2	; 0x02
     e3e:	93 81       	ldd	r25, Z+3	; 0x03
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	4a ef       	ldi	r20, 0xFA	; 250
     e46:	54 e4       	ldi	r21, 0x44	; 68
     e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	f8 01       	movw	r30, r16
     e52:	80 83       	st	Z, r24
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	a2 83       	std	Z+2, r26	; 0x02
     e58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e5a:	fe 01       	movw	r30, r28
     e5c:	e3 5b       	subi	r30, 0xB3	; 179
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	60 81       	ld	r22, Z
     e62:	71 81       	ldd	r23, Z+1	; 0x01
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	93 81       	ldd	r25, Z+3	; 0x03
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e8       	ldi	r20, 0x80	; 128
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e74:	88 23       	and	r24, r24
     e76:	44 f4       	brge	.+16     	; 0xe88 <main+0x352>
		__ticks = 1;
     e78:	fe 01       	movw	r30, r28
     e7a:	e5 5b       	subi	r30, 0xB5	; 181
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
     e86:	64 c0       	rjmp	.+200    	; 0xf50 <main+0x41a>
	else if (__tmp > 65535)
     e88:	fe 01       	movw	r30, r28
     e8a:	e3 5b       	subi	r30, 0xB3	; 179
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	4f e7       	ldi	r20, 0x7F	; 127
     e9c:	57 e4       	ldi	r21, 0x47	; 71
     e9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	0c f0       	brlt	.+2      	; 0xea8 <main+0x372>
     ea6:	43 c0       	rjmp	.+134    	; 0xf2e <main+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea8:	fe 01       	movw	r30, r28
     eaa:	ef 5a       	subi	r30, 0xAF	; 175
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e2       	ldi	r20, 0x20	; 32
     ebc:	51 e4       	ldi	r21, 0x41	; 65
     ebe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	8e 01       	movw	r16, r28
     ec8:	05 5b       	subi	r16, 0xB5	; 181
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	bc 01       	movw	r22, r24
     ece:	cd 01       	movw	r24, r26
     ed0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	f8 01       	movw	r30, r16
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	80 83       	st	Z, r24
     ede:	1f c0       	rjmp	.+62     	; 0xf1e <main+0x3e8>
     ee0:	fe 01       	movw	r30, r28
     ee2:	e7 5b       	subi	r30, 0xB7	; 183
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	88 ec       	ldi	r24, 0xC8	; 200
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
     eee:	fe 01       	movw	r30, r28
     ef0:	e7 5b       	subi	r30, 0xB7	; 183
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <main+0x3c2>
     efc:	fe 01       	movw	r30, r28
     efe:	e7 5b       	subi	r30, 0xB7	; 183
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f06:	de 01       	movw	r26, r28
     f08:	a5 5b       	subi	r26, 0xB5	; 181
     f0a:	bf 4f       	sbci	r27, 0xFF	; 255
     f0c:	fe 01       	movw	r30, r28
     f0e:	e5 5b       	subi	r30, 0xB5	; 181
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	11 96       	adiw	r26, 0x01	; 1
     f1a:	9c 93       	st	X, r25
     f1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1e:	fe 01       	movw	r30, r28
     f20:	e5 5b       	subi	r30, 0xB5	; 181
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	d1 f6       	brne	.-76     	; 0xee0 <main+0x3aa>
     f2c:	27 c0       	rjmp	.+78     	; 0xf7c <main+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2e:	8e 01       	movw	r16, r28
     f30:	05 5b       	subi	r16, 0xB5	; 181
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	fe 01       	movw	r30, r28
     f36:	e3 5b       	subi	r30, 0xB3	; 179
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	f8 01       	movw	r30, r16
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
     f50:	de 01       	movw	r26, r28
     f52:	a9 5b       	subi	r26, 0xB9	; 185
     f54:	bf 4f       	sbci	r27, 0xFF	; 255
     f56:	fe 01       	movw	r30, r28
     f58:	e5 5b       	subi	r30, 0xB5	; 181
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	8d 93       	st	X+, r24
     f62:	9c 93       	st	X, r25
     f64:	fe 01       	movw	r30, r28
     f66:	e9 5b       	subi	r30, 0xB9	; 185
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <main+0x438>
     f72:	fe 01       	movw	r30, r28
     f74:	e9 5b       	subi	r30, 0xB9	; 185
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_clearScreen();
     f7c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
					state = 2;
     f80:	fe 01       	movw	r30, r28
     f82:	e7 59       	subi	r30, 0x97	; 151
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	80 83       	st	Z, r24
     f8a:	3f ce       	rjmp	.-898    	; 0xc0a <main+0xd4>
				}
			} else //Not match
			{
				LCD_displayString("Not-Match");
     f8c:	8b e8       	ldi	r24, 0x8B	; 139
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
     f94:	fe 01       	movw	r30, r28
     f96:	ed 5b       	subi	r30, 0xBD	; 189
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	aa ef       	ldi	r26, 0xFA	; 250
     fa0:	b3 e4       	ldi	r27, 0x43	; 67
     fa2:	80 83       	st	Z, r24
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	a2 83       	std	Z+2, r26	; 0x02
     fa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     faa:	8e 01       	movw	r16, r28
     fac:	01 5c       	subi	r16, 0xC1	; 193
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	fe 01       	movw	r30, r28
     fb2:	ed 5b       	subi	r30, 0xBD	; 189
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a ef       	ldi	r20, 0xFA	; 250
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	f8 01       	movw	r30, r16
     fd0:	80 83       	st	Z, r24
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	a2 83       	std	Z+2, r26	; 0x02
     fd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fd8:	fe 01       	movw	r30, r28
     fda:	ff 96       	adiw	r30, 0x3f	; 63
     fdc:	60 81       	ld	r22, Z
     fde:	71 81       	ldd	r23, Z+1	; 0x01
     fe0:	82 81       	ldd	r24, Z+2	; 0x02
     fe2:	93 81       	ldd	r25, Z+3	; 0x03
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	5f e3       	ldi	r21, 0x3F	; 63
     fec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ff0:	88 23       	and	r24, r24
     ff2:	2c f4       	brge	.+10     	; 0xffe <main+0x4c8>
		__ticks = 1;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9e af       	std	Y+62, r25	; 0x3e
     ffa:	8d af       	std	Y+61, r24	; 0x3d
     ffc:	46 c0       	rjmp	.+140    	; 0x108a <main+0x554>
	else if (__tmp > 65535)
     ffe:	fe 01       	movw	r30, r28
    1000:	ff 96       	adiw	r30, 0x3f	; 63
    1002:	60 81       	ld	r22, Z
    1004:	71 81       	ldd	r23, Z+1	; 0x01
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	93 81       	ldd	r25, Z+3	; 0x03
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	3f ef       	ldi	r19, 0xFF	; 255
    100e:	4f e7       	ldi	r20, 0x7F	; 127
    1010:	57 e4       	ldi	r21, 0x47	; 71
    1012:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1016:	18 16       	cp	r1, r24
    1018:	64 f5       	brge	.+88     	; 0x1072 <main+0x53c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101a:	fe 01       	movw	r30, r28
    101c:	ed 5b       	subi	r30, 0xBD	; 189
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	51 e4       	ldi	r21, 0x41	; 65
    1030:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9e af       	std	Y+62, r25	; 0x3e
    1046:	8d af       	std	Y+61, r24	; 0x3d
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <main+0x532>
    104a:	88 ec       	ldi	r24, 0xC8	; 200
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9c af       	std	Y+60, r25	; 0x3c
    1050:	8b af       	std	Y+59, r24	; 0x3b
    1052:	8b ad       	ldd	r24, Y+59	; 0x3b
    1054:	9c ad       	ldd	r25, Y+60	; 0x3c
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <main+0x520>
    105a:	9c af       	std	Y+60, r25	; 0x3c
    105c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1060:	9e ad       	ldd	r25, Y+62	; 0x3e
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	9e af       	std	Y+62, r25	; 0x3e
    1066:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	8d ad       	ldd	r24, Y+61	; 0x3d
    106a:	9e ad       	ldd	r25, Y+62	; 0x3e
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f7       	brne	.-38     	; 0x104a <main+0x514>
    1070:	16 c0       	rjmp	.+44     	; 0x109e <main+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1072:	fe 01       	movw	r30, r28
    1074:	ff 96       	adiw	r30, 0x3f	; 63
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9e af       	std	Y+62, r25	; 0x3e
    1088:	8d af       	std	Y+61, r24	; 0x3d
    108a:	8d ad       	ldd	r24, Y+61	; 0x3d
    108c:	9e ad       	ldd	r25, Y+62	; 0x3e
    108e:	9a af       	std	Y+58, r25	; 0x3a
    1090:	89 af       	std	Y+57, r24	; 0x39
    1092:	89 ad       	ldd	r24, Y+57	; 0x39
    1094:	9a ad       	ldd	r25, Y+58	; 0x3a
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <main+0x560>
    109a:	9a af       	std	Y+58, r25	; 0x3a
    109c:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				LCD_clearScreen();
    109e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
				state = 1; //repeat state 0
    10a2:	fe 01       	movw	r30, r28
    10a4:	e7 59       	subi	r30, 0x97	; 151
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 83       	st	Z, r24
    10ac:	ae cd       	rjmp	.-1188   	; 0xc0a <main+0xd4>
			}
		}
		else if(state==2)// choose to open door or change pass
    10ae:	fe 01       	movw	r30, r28
    10b0:	e7 59       	subi	r30, 0x97	; 151
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	80 81       	ld	r24, Z
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	09 f0       	breq	.+2      	; 0x10bc <main+0x586>
    10ba:	05 c2       	rjmp	.+1034   	; 0x14c6 <main+0x990>
		{
			uint8 count_false=1;
    10bc:	fe 01       	movw	r30, r28
    10be:	e9 59       	subi	r30, 0x99	; 153
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	80 83       	st	Z, r24
			uint8 pass_state=0;//0->not-match 1->match
    10c6:	fe 01       	movw	r30, r28
    10c8:	ea 59       	subi	r30, 0x9A	; 154
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	10 82       	st	Z, r1
			uint8 a_pass[7];
			uint8 a_pass2[7];
			uint8 a_key_num2=0;
    10ce:	fe 01       	movw	r30, r28
    10d0:	eb 59       	subi	r30, 0x9B	; 155
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	10 82       	st	Z, r1
    10d6:	8a c0       	rjmp	.+276    	; 0x11ec <main+0x6b6>
			 * wait in the menu display for the
			 * right user input
			*/
			while((a_key_num2!='+') && (a_key_num2!='-'))
			{
				LCD_clearScreen();
    10d8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
				LCD_displayString("+ : open door");
    10dc:	85 e9       	ldi	r24, 0x95	; 149
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
				LCD_moveCursor(1, 0);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_moveCursor>
				LCD_displayString("- : change pass");
    10ec:	83 ea       	ldi	r24, 0xA3	; 163
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
				LCD_moveCursor(0, 0);
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_moveCursor>
				a_key_num2 = KEYPAD_getPressedKey();
    10fc:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <KEYPAD_getPressedKey>
    1100:	fe 01       	movw	r30, r28
    1102:	eb 59       	subi	r30, 0x9B	; 155
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	80 83       	st	Z, r24
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a8 ec       	ldi	r26, 0xC8	; 200
    110e:	b3 e4       	ldi	r27, 0x43	; 67
    1110:	8d ab       	std	Y+53, r24	; 0x35
    1112:	9e ab       	std	Y+54, r25	; 0x36
    1114:	af ab       	std	Y+55, r26	; 0x37
    1116:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	6d a9       	ldd	r22, Y+53	; 0x35
    111a:	7e a9       	ldd	r23, Y+54	; 0x36
    111c:	8f a9       	ldd	r24, Y+55	; 0x37
    111e:	98 ad       	ldd	r25, Y+56	; 0x38
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a ef       	ldi	r20, 0xFA	; 250
    1126:	54 e4       	ldi	r21, 0x44	; 68
    1128:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	89 ab       	std	Y+49, r24	; 0x31
    1132:	9a ab       	std	Y+50, r25	; 0x32
    1134:	ab ab       	std	Y+51, r26	; 0x33
    1136:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1138:	69 a9       	ldd	r22, Y+49	; 0x31
    113a:	7a a9       	ldd	r23, Y+50	; 0x32
    113c:	8b a9       	ldd	r24, Y+51	; 0x33
    113e:	9c a9       	ldd	r25, Y+52	; 0x34
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	2c f4       	brge	.+10     	; 0x115a <main+0x624>
		__ticks = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	98 ab       	std	Y+48, r25	; 0x30
    1156:	8f a7       	std	Y+47, r24	; 0x2f
    1158:	3f c0       	rjmp	.+126    	; 0x11d8 <main+0x6a2>
	else if (__tmp > 65535)
    115a:	69 a9       	ldd	r22, Y+49	; 0x31
    115c:	7a a9       	ldd	r23, Y+50	; 0x32
    115e:	8b a9       	ldd	r24, Y+51	; 0x33
    1160:	9c a9       	ldd	r25, Y+52	; 0x34
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	4c f5       	brge	.+82     	; 0x11c4 <main+0x68e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	6d a9       	ldd	r22, Y+53	; 0x35
    1174:	7e a9       	ldd	r23, Y+54	; 0x36
    1176:	8f a9       	ldd	r24, Y+55	; 0x37
    1178:	98 ad       	ldd	r25, Y+56	; 0x38
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	98 ab       	std	Y+48, r25	; 0x30
    1198:	8f a7       	std	Y+47, r24	; 0x2f
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <main+0x684>
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9e a7       	std	Y+46, r25	; 0x2e
    11a2:	8d a7       	std	Y+45, r24	; 0x2d
    11a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    11a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <main+0x672>
    11ac:	9e a7       	std	Y+46, r25	; 0x2e
    11ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b2:	98 a9       	ldd	r25, Y+48	; 0x30
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	98 ab       	std	Y+48, r25	; 0x30
    11b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    11bc:	98 a9       	ldd	r25, Y+48	; 0x30
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	69 f7       	brne	.-38     	; 0x119c <main+0x666>
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <main+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c4:	69 a9       	ldd	r22, Y+49	; 0x31
    11c6:	7a a9       	ldd	r23, Y+50	; 0x32
    11c8:	8b a9       	ldd	r24, Y+51	; 0x33
    11ca:	9c a9       	ldd	r25, Y+52	; 0x34
    11cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	98 ab       	std	Y+48, r25	; 0x30
    11d6:	8f a7       	std	Y+47, r24	; 0x2f
    11d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11da:	98 a9       	ldd	r25, Y+48	; 0x30
    11dc:	9c a7       	std	Y+44, r25	; 0x2c
    11de:	8b a7       	std	Y+43, r24	; 0x2b
    11e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <main+0x6ae>
    11e8:	9c a7       	std	Y+44, r25	; 0x2c
    11ea:	8b a7       	std	Y+43, r24	; 0x2b
			/*
			 * while the choice not equal to '+' or '-'
			 * wait in the menu display for the
			 * right user input
			*/
			while((a_key_num2!='+') && (a_key_num2!='-'))
    11ec:	fe 01       	movw	r30, r28
    11ee:	eb 59       	subi	r30, 0x9B	; 155
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	80 81       	ld	r24, Z
    11f4:	8b 32       	cpi	r24, 0x2B	; 43
    11f6:	39 f0       	breq	.+14     	; 0x1206 <main+0x6d0>
    11f8:	fe 01       	movw	r30, r28
    11fa:	eb 59       	subi	r30, 0x9B	; 155
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	80 81       	ld	r24, Z
    1200:	8d 32       	cpi	r24, 0x2D	; 45
    1202:	09 f0       	breq	.+2      	; 0x1206 <main+0x6d0>
    1204:	69 cf       	rjmp	.-302    	; 0x10d8 <main+0x5a2>
				LCD_displayString("- : change pass");
				LCD_moveCursor(0, 0);
				a_key_num2 = KEYPAD_getPressedKey();
				_delay_ms(400);
			}
			get_password(a_pass);
    1206:	ce 01       	movw	r24, r28
    1208:	8a 57       	subi	r24, 0x7A	; 122
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_password>
			enter_password(a_pass2, "Enter pass");
    1210:	ce 01       	movw	r24, r28
    1212:	83 57       	subi	r24, 0x73	; 115
    1214:	9f 4f       	sbci	r25, 0xFF	; 255
    1216:	23 eb       	ldi	r18, 0xB3	; 179
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	b9 01       	movw	r22, r18
    121c:	0e 94 32 0b 	call	0x1664	; 0x1664 <enter_password>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a8 ec       	ldi	r26, 0xC8	; 200
    1226:	b3 e4       	ldi	r27, 0x43	; 67
    1228:	8f a3       	std	Y+39, r24	; 0x27
    122a:	98 a7       	std	Y+40, r25	; 0x28
    122c:	a9 a7       	std	Y+41, r26	; 0x29
    122e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1230:	6f a1       	ldd	r22, Y+39	; 0x27
    1232:	78 a5       	ldd	r23, Y+40	; 0x28
    1234:	89 a5       	ldd	r24, Y+41	; 0x29
    1236:	9a a5       	ldd	r25, Y+42	; 0x2a
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	4a ef       	ldi	r20, 0xFA	; 250
    123e:	54 e4       	ldi	r21, 0x44	; 68
    1240:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8b a3       	std	Y+35, r24	; 0x23
    124a:	9c a3       	std	Y+36, r25	; 0x24
    124c:	ad a3       	std	Y+37, r26	; 0x25
    124e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1250:	6b a1       	ldd	r22, Y+35	; 0x23
    1252:	7c a1       	ldd	r23, Y+36	; 0x24
    1254:	8d a1       	ldd	r24, Y+37	; 0x25
    1256:	9e a1       	ldd	r25, Y+38	; 0x26
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5f e3       	ldi	r21, 0x3F	; 63
    1260:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1264:	88 23       	and	r24, r24
    1266:	2c f4       	brge	.+10     	; 0x1272 <main+0x73c>
		__ticks = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9a a3       	std	Y+34, r25	; 0x22
    126e:	89 a3       	std	Y+33, r24	; 0x21
    1270:	3f c0       	rjmp	.+126    	; 0x12f0 <main+0x7ba>
	else if (__tmp > 65535)
    1272:	6b a1       	ldd	r22, Y+35	; 0x23
    1274:	7c a1       	ldd	r23, Y+36	; 0x24
    1276:	8d a1       	ldd	r24, Y+37	; 0x25
    1278:	9e a1       	ldd	r25, Y+38	; 0x26
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	3f ef       	ldi	r19, 0xFF	; 255
    127e:	4f e7       	ldi	r20, 0x7F	; 127
    1280:	57 e4       	ldi	r21, 0x47	; 71
    1282:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1286:	18 16       	cp	r1, r24
    1288:	4c f5       	brge	.+82     	; 0x12dc <main+0x7a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128a:	6f a1       	ldd	r22, Y+39	; 0x27
    128c:	78 a5       	ldd	r23, Y+40	; 0x28
    128e:	89 a5       	ldd	r24, Y+41	; 0x29
    1290:	9a a5       	ldd	r25, Y+42	; 0x2a
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e2       	ldi	r20, 0x20	; 32
    1298:	51 e4       	ldi	r21, 0x41	; 65
    129a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9a a3       	std	Y+34, r25	; 0x22
    12b0:	89 a3       	std	Y+33, r24	; 0x21
    12b2:	0f c0       	rjmp	.+30     	; 0x12d2 <main+0x79c>
    12b4:	88 ec       	ldi	r24, 0xC8	; 200
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	98 a3       	std	Y+32, r25	; 0x20
    12ba:	8f 8f       	std	Y+31, r24	; 0x1f
    12bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12be:	98 a1       	ldd	r25, Y+32	; 0x20
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <main+0x78a>
    12c4:	98 a3       	std	Y+32, r25	; 0x20
    12c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ca:	9a a1       	ldd	r25, Y+34	; 0x22
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9a a3       	std	Y+34, r25	; 0x22
    12d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	89 a1       	ldd	r24, Y+33	; 0x21
    12d4:	9a a1       	ldd	r25, Y+34	; 0x22
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	69 f7       	brne	.-38     	; 0x12b4 <main+0x77e>
    12da:	ed c0       	rjmp	.+474    	; 0x14b6 <main+0x980>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12dc:	6b a1       	ldd	r22, Y+35	; 0x23
    12de:	7c a1       	ldd	r23, Y+36	; 0x24
    12e0:	8d a1       	ldd	r24, Y+37	; 0x25
    12e2:	9e a1       	ldd	r25, Y+38	; 0x26
    12e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9a a3       	std	Y+34, r25	; 0x22
    12ee:	89 a3       	std	Y+33, r24	; 0x21
    12f0:	89 a1       	ldd	r24, Y+33	; 0x21
    12f2:	9a a1       	ldd	r25, Y+34	; 0x22
    12f4:	9e 8f       	std	Y+30, r25	; 0x1e
    12f6:	8d 8f       	std	Y+29, r24	; 0x1d
    12f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <main+0x7c6>
    1300:	9e 8f       	std	Y+30, r25	; 0x1e
    1302:	8d 8f       	std	Y+29, r24	; 0x1d
    1304:	d8 c0       	rjmp	.+432    	; 0x14b6 <main+0x980>
			_delay_ms(400);
			while(!pass_state){
				if (strcmp(a_pass, a_pass2) == 0) {
    1306:	ce 01       	movw	r24, r28
    1308:	8a 57       	subi	r24, 0x7A	; 122
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	9e 01       	movw	r18, r28
    130e:	23 57       	subi	r18, 0x73	; 115
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	b9 01       	movw	r22, r18
    1314:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <strcmp>
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	21 f5       	brne	.+72     	; 0x1364 <main+0x82e>
					pass_state=1;
    131c:	fe 01       	movw	r30, r28
    131e:	ea 59       	subi	r30, 0x9A	; 154
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 83       	st	Z, r24
					if (a_key_num2 == '+') {
    1326:	fe 01       	movw	r30, r28
    1328:	eb 59       	subi	r30, 0x9B	; 155
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	80 81       	ld	r24, Z
    132e:	8b 32       	cpi	r24, 0x2B	; 43
    1330:	31 f4       	brne	.+12     	; 0x133e <main+0x808>
						state = 3;
    1332:	fe 01       	movw	r30, r28
    1334:	e7 59       	subi	r30, 0x97	; 151
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	83 e0       	ldi	r24, 0x03	; 3
    133a:	80 83       	st	Z, r24
    133c:	98 c0       	rjmp	.+304    	; 0x146e <main+0x938>
					} else if (a_key_num2 == '-') {
    133e:	fe 01       	movw	r30, r28
    1340:	eb 59       	subi	r30, 0x9B	; 155
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	80 81       	ld	r24, Z
    1346:	8d 32       	cpi	r24, 0x2D	; 45
    1348:	09 f0       	breq	.+2      	; 0x134c <main+0x816>
    134a:	91 c0       	rjmp	.+290    	; 0x146e <main+0x938>
						LCD_clearScreen();
    134c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
						LCD_displayString("Changing password");
    1350:	8e eb       	ldi	r24, 0xBE	; 190
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
						state = 1;
    1358:	fe 01       	movw	r30, r28
    135a:	e7 59       	subi	r30, 0x97	; 151
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 83       	st	Z, r24
    1362:	85 c0       	rjmp	.+266    	; 0x146e <main+0x938>
					}
				} else {
					count_false++;
    1364:	de 01       	movw	r26, r28
    1366:	a9 59       	subi	r26, 0x99	; 153
    1368:	bf 4f       	sbci	r27, 0xFF	; 255
    136a:	fe 01       	movw	r30, r28
    136c:	e9 59       	subi	r30, 0x99	; 153
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	80 81       	ld	r24, Z
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	8c 93       	st	X, r24
					LCD_clearScreen();
    1376:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
					enter_password(a_pass2, "Enter pass again");
    137a:	ce 01       	movw	r24, r28
    137c:	83 57       	subi	r24, 0x73	; 115
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	20 ed       	ldi	r18, 0xD0	; 208
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	b9 01       	movw	r22, r18
    1386:	0e 94 32 0b 	call	0x1664	; 0x1664 <enter_password>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a8 ec       	ldi	r26, 0xC8	; 200
    1390:	b3 e4       	ldi	r27, 0x43	; 67
    1392:	89 8f       	std	Y+25, r24	; 0x19
    1394:	9a 8f       	std	Y+26, r25	; 0x1a
    1396:	ab 8f       	std	Y+27, r26	; 0x1b
    1398:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139a:	69 8d       	ldd	r22, Y+25	; 0x19
    139c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    139e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4a ef       	ldi	r20, 0xFA	; 250
    13a8:	54 e4       	ldi	r21, 0x44	; 68
    13aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8d 8b       	std	Y+21, r24	; 0x15
    13b4:	9e 8b       	std	Y+22, r25	; 0x16
    13b6:	af 8b       	std	Y+23, r26	; 0x17
    13b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ba:	6d 89       	ldd	r22, Y+21	; 0x15
    13bc:	7e 89       	ldd	r23, Y+22	; 0x16
    13be:	8f 89       	ldd	r24, Y+23	; 0x17
    13c0:	98 8d       	ldd	r25, Y+24	; 0x18
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e8       	ldi	r20, 0x80	; 128
    13c8:	5f e3       	ldi	r21, 0x3F	; 63
    13ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	2c f4       	brge	.+10     	; 0x13dc <main+0x8a6>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	3f c0       	rjmp	.+126    	; 0x145a <main+0x924>
	else if (__tmp > 65535)
    13dc:	6d 89       	ldd	r22, Y+21	; 0x15
    13de:	7e 89       	ldd	r23, Y+22	; 0x16
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	98 8d       	ldd	r25, Y+24	; 0x18
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	57 e4       	ldi	r21, 0x47	; 71
    13ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	4c f5       	brge	.+82     	; 0x1446 <main+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f4:	69 8d       	ldd	r22, Y+25	; 0x19
    13f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e2       	ldi	r20, 0x20	; 32
    1402:	51 e4       	ldi	r21, 0x41	; 65
    1404:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9c 8b       	std	Y+20, r25	; 0x14
    141a:	8b 8b       	std	Y+19, r24	; 0x13
    141c:	0f c0       	rjmp	.+30     	; 0x143c <main+0x906>
    141e:	88 ec       	ldi	r24, 0xC8	; 200
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9a 8b       	std	Y+18, r25	; 0x12
    1424:	89 8b       	std	Y+17, r24	; 0x11
    1426:	89 89       	ldd	r24, Y+17	; 0x11
    1428:	9a 89       	ldd	r25, Y+18	; 0x12
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <main+0x8f4>
    142e:	9a 8b       	std	Y+18, r25	; 0x12
    1430:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9c 8b       	std	Y+20, r25	; 0x14
    143a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	9c 89       	ldd	r25, Y+20	; 0x14
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	69 f7       	brne	.-38     	; 0x141e <main+0x8e8>
    1444:	14 c0       	rjmp	.+40     	; 0x146e <main+0x938>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1446:	6d 89       	ldd	r22, Y+21	; 0x15
    1448:	7e 89       	ldd	r23, Y+22	; 0x16
    144a:	8f 89       	ldd	r24, Y+23	; 0x17
    144c:	98 8d       	ldd	r25, Y+24	; 0x18
    144e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9c 8b       	std	Y+20, r25	; 0x14
    1458:	8b 8b       	std	Y+19, r24	; 0x13
    145a:	8b 89       	ldd	r24, Y+19	; 0x13
    145c:	9c 89       	ldd	r25, Y+20	; 0x14
    145e:	98 8b       	std	Y+16, r25	; 0x10
    1460:	8f 87       	std	Y+15, r24	; 0x0f
    1462:	8f 85       	ldd	r24, Y+15	; 0x0f
    1464:	98 89       	ldd	r25, Y+16	; 0x10
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <main+0x930>
    146a:	98 8b       	std	Y+16, r25	; 0x10
    146c:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(400);
				}
				if (count_false == 3) {/*trigger buzzer*/
    146e:	fe 01       	movw	r30, r28
    1470:	e9 59       	subi	r30, 0x99	; 153
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	f1 f4       	brne	.+60     	; 0x14b6 <main+0x980>
					uint8 buzzer_byte=0;
    147a:	fe 01       	movw	r30, r28
    147c:	ec 59       	subi	r30, 0x9C	; 156
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	10 82       	st	Z, r1
					LCD_clearScreen();
    1482:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
					LCD_displayString("Error->Buzzer");
    1486:	81 ee       	ldi	r24, 0xE1	; 225
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
					UART_sendByte(trigger_buzzer);
    148e:	88 e5       	ldi	r24, 0x58	; 88
    1490:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
    1494:	06 c0       	rjmp	.+12     	; 0x14a2 <main+0x96c>
					while(buzzer_byte!=stop_buzzer){
						buzzer_byte=UART_recieveByte();
    1496:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
    149a:	fe 01       	movw	r30, r28
    149c:	ec 59       	subi	r30, 0x9C	; 156
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 83       	st	Z, r24
				if (count_false == 3) {/*trigger buzzer*/
					uint8 buzzer_byte=0;
					LCD_clearScreen();
					LCD_displayString("Error->Buzzer");
					UART_sendByte(trigger_buzzer);
					while(buzzer_byte!=stop_buzzer){
    14a2:	fe 01       	movw	r30, r28
    14a4:	ec 59       	subi	r30, 0x9C	; 156
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	89 35       	cpi	r24, 0x59	; 89
    14ac:	a1 f7       	brne	.-24     	; 0x1496 <main+0x960>
						buzzer_byte=UART_recieveByte();
					}
					count_false=0;
    14ae:	fe 01       	movw	r30, r28
    14b0:	e9 59       	subi	r30, 0x99	; 153
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	10 82       	st	Z, r1
				_delay_ms(400);
			}
			get_password(a_pass);
			enter_password(a_pass2, "Enter pass");
			_delay_ms(400);
			while(!pass_state){
    14b6:	fe 01       	movw	r30, r28
    14b8:	ea 59       	subi	r30, 0x9A	; 154
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	80 81       	ld	r24, Z
    14be:	88 23       	and	r24, r24
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <main+0x98e>
    14c2:	21 cf       	rjmp	.-446    	; 0x1306 <main+0x7d0>
    14c4:	a2 cb       	rjmp	.-2236   	; 0xc0a <main+0xd4>
					}
					count_false=0;
				}
			}
		}
		else if (state == 3) //Opening door
    14c6:	fe 01       	movw	r30, r28
    14c8:	e7 59       	subi	r30, 0x97	; 151
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 81       	ld	r24, Z
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <main+0x99e>
    14d2:	9b cb       	rjmp	.-2250   	; 0xc0a <main+0xd4>
		{
			UART_sendByte(motor_start);
    14d4:	8f e5       	ldi	r24, 0x5F	; 95
    14d6:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
			uint8 door_byte=0;
    14da:	fe 01       	movw	r30, r28
    14dc:	ed 59       	subi	r30, 0x9D	; 157
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	10 82       	st	Z, r1
			while(1){
				door_byte=UART_recieveByte();
    14e2:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
    14e6:	fe 01       	movw	r30, r28
    14e8:	ed 59       	subi	r30, 0x9D	; 157
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 83       	st	Z, r24
				if(door_byte==motor_cw)
    14ee:	fe 01       	movw	r30, r28
    14f0:	ed 59       	subi	r30, 0x9D	; 157
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	80 81       	ld	r24, Z
    14f6:	80 36       	cpi	r24, 0x60	; 96
    14f8:	59 f4       	brne	.+22     	; 0x1510 <main+0x9da>
				{
					door_byte=0;
    14fa:	fe 01       	movw	r30, r28
    14fc:	ed 59       	subi	r30, 0x9D	; 157
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	10 82       	st	Z, r1
					LCD_clearScreen();
    1502:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
					LCD_displayString("Unlocking Door");
    1506:	8f ee       	ldi	r24, 0xEF	; 239
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
    150e:	e9 cf       	rjmp	.-46     	; 0x14e2 <main+0x9ac>
				}
				else if(door_byte==motor_stop)
    1510:	fe 01       	movw	r30, r28
    1512:	ed 59       	subi	r30, 0x9D	; 157
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	80 81       	ld	r24, Z
    1518:	82 36       	cpi	r24, 0x62	; 98
    151a:	59 f4       	brne	.+22     	; 0x1532 <main+0x9fc>
				{
					door_byte=0;
    151c:	fe 01       	movw	r30, r28
    151e:	ed 59       	subi	r30, 0x9D	; 157
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	10 82       	st	Z, r1
					LCD_clearScreen();
    1524:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
					LCD_displayString("Holding Door");
    1528:	8e ef       	ldi	r24, 0xFE	; 254
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
    1530:	d8 cf       	rjmp	.-80     	; 0x14e2 <main+0x9ac>
				}
				else if(door_byte==motor_acw)
    1532:	fe 01       	movw	r30, r28
    1534:	ed 59       	subi	r30, 0x9D	; 157
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	81 36       	cpi	r24, 0x61	; 97
    153c:	59 f4       	brne	.+22     	; 0x1554 <main+0xa1e>
				{
					door_byte=0;
    153e:	fe 01       	movw	r30, r28
    1540:	ed 59       	subi	r30, 0x9D	; 157
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	10 82       	st	Z, r1
					LCD_clearScreen();
    1546:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
					LCD_displayString("Locking Door");
    154a:	8b e0       	ldi	r24, 0x0B	; 11
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
    1552:	c7 cf       	rjmp	.-114    	; 0x14e2 <main+0x9ac>
				}
				else if(door_byte==motor_finish)
    1554:	fe 01       	movw	r30, r28
    1556:	ed 59       	subi	r30, 0x9D	; 157
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	83 36       	cpi	r24, 0x63	; 99
    155e:	09 f6       	brne	.-126    	; 0x14e2 <main+0x9ac>
				{
					LCD_clearScreen();
    1560:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
					LCD_displayString("Door closed");
    1564:	88 e1       	ldi	r24, 0x18	; 24
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
					door_byte=0;
    156c:	fe 01       	movw	r30, r28
    156e:	ed 59       	subi	r30, 0x9D	; 157
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	10 82       	st	Z, r1
					state=2;//return to menu
    1574:	fe 01       	movw	r30, r28
    1576:	e7 59       	subi	r30, 0x97	; 151
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	80 83       	st	Z, r24
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	aa ef       	ldi	r26, 0xFA	; 250
    1584:	b3 e4       	ldi	r27, 0x43	; 67
    1586:	8b 87       	std	Y+11, r24	; 0x0b
    1588:	9c 87       	std	Y+12, r25	; 0x0c
    158a:	ad 87       	std	Y+13, r26	; 0x0d
    158c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1590:	7c 85       	ldd	r23, Y+12	; 0x0c
    1592:	8d 85       	ldd	r24, Y+13	; 0x0d
    1594:	9e 85       	ldd	r25, Y+14	; 0x0e
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a ef       	ldi	r20, 0xFA	; 250
    159c:	54 e4       	ldi	r21, 0x44	; 68
    159e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	8f 83       	std	Y+7, r24	; 0x07
    15a8:	98 87       	std	Y+8, r25	; 0x08
    15aa:	a9 87       	std	Y+9, r26	; 0x09
    15ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ae:	6f 81       	ldd	r22, Y+7	; 0x07
    15b0:	78 85       	ldd	r23, Y+8	; 0x08
    15b2:	89 85       	ldd	r24, Y+9	; 0x09
    15b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	5f e3       	ldi	r21, 0x3F	; 63
    15be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15c2:	88 23       	and	r24, r24
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <main+0xa9a>
		__ticks = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	3f c0       	rjmp	.+126    	; 0x164e <main+0xb18>
	else if (__tmp > 65535)
    15d0:	6f 81       	ldd	r22, Y+7	; 0x07
    15d2:	78 85       	ldd	r23, Y+8	; 0x08
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	4f e7       	ldi	r20, 0x7F	; 127
    15de:	57 e4       	ldi	r21, 0x47	; 71
    15e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15e4:	18 16       	cp	r1, r24
    15e6:	4c f5       	brge	.+82     	; 0x163a <main+0xb04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e2       	ldi	r20, 0x20	; 32
    15f6:	51 e4       	ldi	r21, 0x41	; 65
    15f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
    1610:	0f c0       	rjmp	.+30     	; 0x1630 <main+0xafa>
    1612:	88 ec       	ldi	r24, 0xC8	; 200
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9c 83       	std	Y+4, r25	; 0x04
    1618:	8b 83       	std	Y+3, r24	; 0x03
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <main+0xae8>
    1622:	9c 83       	std	Y+4, r25	; 0x04
    1624:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	69 f7       	brne	.-38     	; 0x1612 <main+0xadc>
    1638:	e8 ca       	rjmp	.-2608   	; 0xc0a <main+0xd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163a:	6f 81       	ldd	r22, Y+7	; 0x07
    163c:	78 85       	ldd	r23, Y+8	; 0x08
    163e:	89 85       	ldd	r24, Y+9	; 0x09
    1640:	9a 85       	ldd	r25, Y+10	; 0x0a
    1642:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <main+0xb24>
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	d3 ca       	rjmp	.-2650   	; 0xc0a <main+0xd4>

00001664 <enter_password>:
/*
 * Description :
 * 1.Display command on LCD
 * 2.Retrieve password entered from the user
 */
void enter_password(uint8 *Str, uint8 *Str2) {
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	a2 97       	sbiw	r28, 0x22	; 34
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	98 a3       	std	Y+32, r25	; 0x20
    167a:	8f 8f       	std	Y+31, r24	; 0x1f
    167c:	7a a3       	std	Y+34, r23	; 0x22
    167e:	69 a3       	std	Y+33, r22	; 0x21
	LCD_clearScreen();
    1680:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <LCD_clearScreen>
	LCD_displayString(Str2);
    1684:	89 a1       	ldd	r24, Y+33	; 0x21
    1686:	9a a1       	ldd	r25, Y+34	; 0x22
    1688:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
	uint8 i = 0;
    168c:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 a_key_num;
	LCD_moveCursor(1, 0);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_moveCursor>
	a_key_num = KEYPAD_getPressedKey();
    1696:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <KEYPAD_getPressedKey>
    169a:	8d 8f       	std	Y+29, r24	; 0x1d
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a8 ec       	ldi	r26, 0xC8	; 200
    16a2:	b3 e4       	ldi	r27, 0x43	; 67
    16a4:	89 8f       	std	Y+25, r24	; 0x19
    16a6:	9a 8f       	std	Y+26, r25	; 0x1a
    16a8:	ab 8f       	std	Y+27, r26	; 0x1b
    16aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ac:	69 8d       	ldd	r22, Y+25	; 0x19
    16ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a ef       	ldi	r20, 0xFA	; 250
    16ba:	54 e4       	ldi	r21, 0x44	; 68
    16bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8d 8b       	std	Y+21, r24	; 0x15
    16c6:	9e 8b       	std	Y+22, r25	; 0x16
    16c8:	af 8b       	std	Y+23, r26	; 0x17
    16ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16cc:	6d 89       	ldd	r22, Y+21	; 0x15
    16ce:	7e 89       	ldd	r23, Y+22	; 0x16
    16d0:	8f 89       	ldd	r24, Y+23	; 0x17
    16d2:	98 8d       	ldd	r25, Y+24	; 0x18
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	5f e3       	ldi	r21, 0x3F	; 63
    16dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	2c f4       	brge	.+10     	; 0x16ee <enter_password+0x8a>
		__ticks = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9c 8b       	std	Y+20, r25	; 0x14
    16ea:	8b 8b       	std	Y+19, r24	; 0x13
    16ec:	3f c0       	rjmp	.+126    	; 0x176c <enter_password+0x108>
	else if (__tmp > 65535)
    16ee:	6d 89       	ldd	r22, Y+21	; 0x15
    16f0:	7e 89       	ldd	r23, Y+22	; 0x16
    16f2:	8f 89       	ldd	r24, Y+23	; 0x17
    16f4:	98 8d       	ldd	r25, Y+24	; 0x18
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	4f e7       	ldi	r20, 0x7F	; 127
    16fc:	57 e4       	ldi	r21, 0x47	; 71
    16fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1702:	18 16       	cp	r1, r24
    1704:	4c f5       	brge	.+82     	; 0x1758 <enter_password+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1706:	69 8d       	ldd	r22, Y+25	; 0x19
    1708:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e2       	ldi	r20, 0x20	; 32
    1714:	51 e4       	ldi	r21, 0x41	; 65
    1716:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9c 8b       	std	Y+20, r25	; 0x14
    172c:	8b 8b       	std	Y+19, r24	; 0x13
    172e:	0f c0       	rjmp	.+30     	; 0x174e <enter_password+0xea>
    1730:	88 ec       	ldi	r24, 0xC8	; 200
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9a 8b       	std	Y+18, r25	; 0x12
    1736:	89 8b       	std	Y+17, r24	; 0x11
    1738:	89 89       	ldd	r24, Y+17	; 0x11
    173a:	9a 89       	ldd	r25, Y+18	; 0x12
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <enter_password+0xd8>
    1740:	9a 8b       	std	Y+18, r25	; 0x12
    1742:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1744:	8b 89       	ldd	r24, Y+19	; 0x13
    1746:	9c 89       	ldd	r25, Y+20	; 0x14
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	9c 8b       	std	Y+20, r25	; 0x14
    174c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	8b 89       	ldd	r24, Y+19	; 0x13
    1750:	9c 89       	ldd	r25, Y+20	; 0x14
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f7       	brne	.-38     	; 0x1730 <enter_password+0xcc>
    1756:	9c c0       	rjmp	.+312    	; 0x1890 <enter_password+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	6d 89       	ldd	r22, Y+21	; 0x15
    175a:	7e 89       	ldd	r23, Y+22	; 0x16
    175c:	8f 89       	ldd	r24, Y+23	; 0x17
    175e:	98 8d       	ldd	r25, Y+24	; 0x18
    1760:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9c 8b       	std	Y+20, r25	; 0x14
    176a:	8b 8b       	std	Y+19, r24	; 0x13
    176c:	8b 89       	ldd	r24, Y+19	; 0x13
    176e:	9c 89       	ldd	r25, Y+20	; 0x14
    1770:	98 8b       	std	Y+16, r25	; 0x10
    1772:	8f 87       	std	Y+15, r24	; 0x0f
    1774:	8f 85       	ldd	r24, Y+15	; 0x0f
    1776:	98 89       	ldd	r25, Y+16	; 0x10
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <enter_password+0x114>
    177c:	98 8b       	std	Y+16, r25	; 0x10
    177e:	8f 87       	std	Y+15, r24	; 0x0f
    1780:	87 c0       	rjmp	.+270    	; 0x1890 <enter_password+0x22c>
	_delay_ms(400);
	while (a_key_num != 61) {
		Str[i] = a_key_num;
    1782:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8f 8d       	ldd	r24, Y+31	; 0x1f
    178a:	98 a1       	ldd	r25, Y+32	; 0x20
    178c:	fc 01       	movw	r30, r24
    178e:	e2 0f       	add	r30, r18
    1790:	f3 1f       	adc	r31, r19
    1792:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1794:	80 83       	st	Z, r24
		i++;
    1796:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	8e 8f       	std	Y+30, r24	; 0x1e
		LCD_intgerToString(a_key_num);
    179c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 57 15 	call	0x2aae	; 0x2aae <LCD_intgerToString>
		a_key_num = KEYPAD_getPressedKey();
    17a6:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <KEYPAD_getPressedKey>
    17aa:	8d 8f       	std	Y+29, r24	; 0x1d
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a8 ec       	ldi	r26, 0xC8	; 200
    17b2:	b3 e4       	ldi	r27, 0x43	; 67
    17b4:	8b 87       	std	Y+11, r24	; 0x0b
    17b6:	9c 87       	std	Y+12, r25	; 0x0c
    17b8:	ad 87       	std	Y+13, r26	; 0x0d
    17ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17be:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	4a ef       	ldi	r20, 0xFA	; 250
    17ca:	54 e4       	ldi	r21, 0x44	; 68
    17cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	8f 83       	std	Y+7, r24	; 0x07
    17d6:	98 87       	std	Y+8, r25	; 0x08
    17d8:	a9 87       	std	Y+9, r26	; 0x09
    17da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17dc:	6f 81       	ldd	r22, Y+7	; 0x07
    17de:	78 85       	ldd	r23, Y+8	; 0x08
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f e3       	ldi	r21, 0x3F	; 63
    17ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f0:	88 23       	and	r24, r24
    17f2:	2c f4       	brge	.+10     	; 0x17fe <enter_password+0x19a>
		__ticks = 1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	3f c0       	rjmp	.+126    	; 0x187c <enter_password+0x218>
	else if (__tmp > 65535)
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	3f ef       	ldi	r19, 0xFF	; 255
    180a:	4f e7       	ldi	r20, 0x7F	; 127
    180c:	57 e4       	ldi	r21, 0x47	; 71
    180e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1812:	18 16       	cp	r1, r24
    1814:	4c f5       	brge	.+82     	; 0x1868 <enter_password+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1816:	6b 85       	ldd	r22, Y+11	; 0x0b
    1818:	7c 85       	ldd	r23, Y+12	; 0x0c
    181a:	8d 85       	ldd	r24, Y+13	; 0x0d
    181c:	9e 85       	ldd	r25, Y+14	; 0x0e
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e2       	ldi	r20, 0x20	; 32
    1824:	51 e4       	ldi	r21, 0x41	; 65
    1826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	0f c0       	rjmp	.+30     	; 0x185e <enter_password+0x1fa>
    1840:	88 ec       	ldi	r24, 0xC8	; 200
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9c 83       	std	Y+4, r25	; 0x04
    1846:	8b 83       	std	Y+3, r24	; 0x03
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <enter_password+0x1e8>
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	9e 83       	std	Y+6, r25	; 0x06
    185c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	69 f7       	brne	.-38     	; 0x1840 <enter_password+0x1dc>
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <enter_password+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1868:	6f 81       	ldd	r22, Y+7	; 0x07
    186a:	78 85       	ldd	r23, Y+8	; 0x08
    186c:	89 85       	ldd	r24, Y+9	; 0x09
    186e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	9a 81       	ldd	r25, Y+2	; 0x02
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <enter_password+0x224>
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
	uint8 i = 0;
	uint8 a_key_num;
	LCD_moveCursor(1, 0);
	a_key_num = KEYPAD_getPressedKey();
	_delay_ms(400);
	while (a_key_num != 61) {
    1890:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1892:	8d 33       	cpi	r24, 0x3D	; 61
    1894:	09 f0       	breq	.+2      	; 0x1898 <enter_password+0x234>
    1896:	75 cf       	rjmp	.-278    	; 0x1782 <enter_password+0x11e>
		i++;
		LCD_intgerToString(a_key_num);
		a_key_num = KEYPAD_getPressedKey();
		_delay_ms(400);
	}
	Str[i] = '#';
    1898:	8e 8d       	ldd	r24, Y+30	; 0x1e
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a0:	98 a1       	ldd	r25, Y+32	; 0x20
    18a2:	fc 01       	movw	r30, r24
    18a4:	e2 0f       	add	r30, r18
    18a6:	f3 1f       	adc	r31, r19
    18a8:	83 e2       	ldi	r24, 0x23	; 35
    18aa:	80 83       	st	Z, r24
	LCD_moveCursor(0, 0);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_moveCursor>
}
    18b4:	a2 96       	adiw	r28, 0x22	; 34
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <get_password>:
/*
 * Description :
 * 1.Get the password saved in eeprom from mc2
 */
void get_password(uint8 *Str){
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <get_password+0x6>
    18cc:	0f 92       	push	r0
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	9b 83       	std	Y+3, r25	; 0x03
    18d4:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(get_pass); //anounnce state to mc2
    18d6:	8d e4       	ldi	r24, 0x4D	; 77
    18d8:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
	UART_receiveString(Str);
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	0e 94 18 16 	call	0x2c30	; 0x2c30 <UART_receiveString>
	uint8 i = 0;
    18e4:	19 82       	std	Y+1, r1	; 0x01
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <get_password+0x28>
	while (Str[i] != '\0') {
		i++;
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	89 83       	std	Y+1, r24	; 0x01
 */
void get_password(uint8 *Str){
	UART_sendByte(get_pass); //anounnce state to mc2
	UART_receiveString(Str);
	uint8 i = 0;
	while (Str[i] != '\0') {
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	fc 01       	movw	r30, r24
    18fa:	e2 0f       	add	r30, r18
    18fc:	f3 1f       	adc	r31, r19
    18fe:	80 81       	ld	r24, Z
    1900:	88 23       	and	r24, r24
    1902:	91 f7       	brne	.-28     	; 0x18e8 <get_password+0x22>
		i++;
	}
	Str[i]='#';
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	9b 81       	ldd	r25, Y+3	; 0x03
    190e:	fc 01       	movw	r30, r24
    1910:	e2 0f       	add	r30, r18
    1912:	f3 1f       	adc	r31, r19
    1914:	83 e2       	ldi	r24, 0x23	; 35
    1916:	80 83       	st	Z, r24
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <GPIO_setupPinDirection+0x6>
    192a:	00 d0       	rcall	.+0      	; 0x192c <GPIO_setupPinDirection+0x8>
    192c:	0f 92       	push	r0
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	6a 83       	std	Y+2, r22	; 0x02
    1936:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	88 30       	cpi	r24, 0x08	; 8
    193c:	08 f0       	brcs	.+2      	; 0x1940 <GPIO_setupPinDirection+0x1c>
    193e:	d5 c0       	rjmp	.+426    	; 0x1aea <GPIO_setupPinDirection+0x1c6>
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	08 f0       	brcs	.+2      	; 0x1948 <GPIO_setupPinDirection+0x24>
    1946:	d1 c0       	rjmp	.+418    	; 0x1aea <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3d 83       	std	Y+5, r19	; 0x05
    1950:	2c 83       	std	Y+4, r18	; 0x04
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	9d 81       	ldd	r25, Y+5	; 0x05
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	91 05       	cpc	r25, r1
    195a:	09 f4       	brne	.+2      	; 0x195e <GPIO_setupPinDirection+0x3a>
    195c:	43 c0       	rjmp	.+134    	; 0x19e4 <GPIO_setupPinDirection+0xc0>
    195e:	2c 81       	ldd	r18, Y+4	; 0x04
    1960:	3d 81       	ldd	r19, Y+5	; 0x05
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	2c f4       	brge	.+10     	; 0x1972 <GPIO_setupPinDirection+0x4e>
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	9d 81       	ldd	r25, Y+5	; 0x05
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	71 f0       	breq	.+28     	; 0x198c <GPIO_setupPinDirection+0x68>
    1970:	bc c0       	rjmp	.+376    	; 0x1aea <GPIO_setupPinDirection+0x1c6>
    1972:	2c 81       	ldd	r18, Y+4	; 0x04
    1974:	3d 81       	ldd	r19, Y+5	; 0x05
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	09 f4       	brne	.+2      	; 0x197e <GPIO_setupPinDirection+0x5a>
    197c:	5f c0       	rjmp	.+190    	; 0x1a3c <GPIO_setupPinDirection+0x118>
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9d 81       	ldd	r25, Y+5	; 0x05
    1982:	83 30       	cpi	r24, 0x03	; 3
    1984:	91 05       	cpc	r25, r1
    1986:	09 f4       	brne	.+2      	; 0x198a <GPIO_setupPinDirection+0x66>
    1988:	85 c0       	rjmp	.+266    	; 0x1a94 <GPIO_setupPinDirection+0x170>
    198a:	af c0       	rjmp	.+350    	; 0x1aea <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	a1 f4       	brne	.+40     	; 0x19ba <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1992:	aa e3       	ldi	r26, 0x3A	; 58
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ea e3       	ldi	r30, 0x3A	; 58
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 2e       	mov	r0, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <GPIO_setupPinDirection+0x8c>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <GPIO_setupPinDirection+0x88>
    19b4:	84 2b       	or	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	98 c0       	rjmp	.+304    	; 0x1aea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19ba:	aa e3       	ldi	r26, 0x3A	; 58
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	ea e3       	ldi	r30, 0x3A	; 58
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <GPIO_setupPinDirection+0xb4>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <GPIO_setupPinDirection+0xb0>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	83 c0       	rjmp	.+262    	; 0x1aea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	a1 f4       	brne	.+40     	; 0x1a12 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    19ea:	a7 e3       	ldi	r26, 0x37	; 55
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e7 e3       	ldi	r30, 0x37	; 55
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <GPIO_setupPinDirection+0xe4>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <GPIO_setupPinDirection+0xe0>
    1a0c:	84 2b       	or	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	6c c0       	rjmp	.+216    	; 0x1aea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a12:	a7 e3       	ldi	r26, 0x37	; 55
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e7 e3       	ldi	r30, 0x37	; 55
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <GPIO_setupPinDirection+0x10c>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <GPIO_setupPinDirection+0x108>
    1a34:	80 95       	com	r24
    1a36:	84 23       	and	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	57 c0       	rjmp	.+174    	; 0x1aea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	a1 f4       	brne	.+40     	; 0x1a6a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a42:	a4 e3       	ldi	r26, 0x34	; 52
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e4 e3       	ldi	r30, 0x34	; 52
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_setupPinDirection+0x13c>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_setupPinDirection+0x138>
    1a64:	84 2b       	or	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	40 c0       	rjmp	.+128    	; 0x1aea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a6a:	a4 e3       	ldi	r26, 0x34	; 52
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e4 e3       	ldi	r30, 0x34	; 52
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <GPIO_setupPinDirection+0x164>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <GPIO_setupPinDirection+0x160>
    1a8c:	80 95       	com	r24
    1a8e:	84 23       	and	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	2b c0       	rjmp	.+86     	; 0x1aea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	a1 f4       	brne	.+40     	; 0x1ac2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a9a:	a1 e3       	ldi	r26, 0x31	; 49
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e1 e3       	ldi	r30, 0x31	; 49
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 2e       	mov	r0, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <GPIO_setupPinDirection+0x194>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	0a 94       	dec	r0
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <GPIO_setupPinDirection+0x190>
    1abc:	84 2b       	or	r24, r20
    1abe:	8c 93       	st	X, r24
    1ac0:	14 c0       	rjmp	.+40     	; 0x1aea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ac2:	a1 e3       	ldi	r26, 0x31	; 49
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e1 e3       	ldi	r30, 0x31	; 49
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <GPIO_setupPinDirection+0x1bc>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <GPIO_setupPinDirection+0x1b8>
    1ae4:	80 95       	com	r24
    1ae6:	84 23       	and	r24, r20
    1ae8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <GPIO_writePin+0x6>
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <GPIO_writePin+0x8>
    1b02:	0f 92       	push	r0
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	6a 83       	std	Y+2, r22	; 0x02
    1b0c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	88 30       	cpi	r24, 0x08	; 8
    1b12:	08 f0       	brcs	.+2      	; 0x1b16 <GPIO_writePin+0x1c>
    1b14:	d5 c0       	rjmp	.+426    	; 0x1cc0 <GPIO_writePin+0x1c6>
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	84 30       	cpi	r24, 0x04	; 4
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <GPIO_writePin+0x24>
    1b1c:	d1 c0       	rjmp	.+418    	; 0x1cc0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	3d 83       	std	Y+5, r19	; 0x05
    1b26:	2c 83       	std	Y+4, r18	; 0x04
    1b28:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	91 05       	cpc	r25, r1
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <GPIO_writePin+0x3a>
    1b32:	43 c0       	rjmp	.+134    	; 0x1bba <GPIO_writePin+0xc0>
    1b34:	2c 81       	ldd	r18, Y+4	; 0x04
    1b36:	3d 81       	ldd	r19, Y+5	; 0x05
    1b38:	22 30       	cpi	r18, 0x02	; 2
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <GPIO_writePin+0x4e>
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	9d 81       	ldd	r25, Y+5	; 0x05
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	71 f0       	breq	.+28     	; 0x1b62 <GPIO_writePin+0x68>
    1b46:	bc c0       	rjmp	.+376    	; 0x1cc0 <GPIO_writePin+0x1c6>
    1b48:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <GPIO_writePin+0x5a>
    1b52:	5f c0       	rjmp	.+190    	; 0x1c12 <GPIO_writePin+0x118>
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <GPIO_writePin+0x66>
    1b5e:	85 c0       	rjmp	.+266    	; 0x1c6a <GPIO_writePin+0x170>
    1b60:	af c0       	rjmp	.+350    	; 0x1cc0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	a1 f4       	brne	.+40     	; 0x1b90 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b68:	ab e3       	ldi	r26, 0x3B	; 59
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	eb e3       	ldi	r30, 0x3B	; 59
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <GPIO_writePin+0x8c>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <GPIO_writePin+0x88>
    1b8a:	84 2b       	or	r24, r20
    1b8c:	8c 93       	st	X, r24
    1b8e:	98 c0       	rjmp	.+304    	; 0x1cc0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b90:	ab e3       	ldi	r26, 0x3B	; 59
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	eb e3       	ldi	r30, 0x3B	; 59
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 2e       	mov	r0, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <GPIO_writePin+0xb4>
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	0a 94       	dec	r0
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <GPIO_writePin+0xb0>
    1bb2:	80 95       	com	r24
    1bb4:	84 23       	and	r24, r20
    1bb6:	8c 93       	st	X, r24
    1bb8:	83 c0       	rjmp	.+262    	; 0x1cc0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	a1 f4       	brne	.+40     	; 0x1be8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1bc0:	a8 e3       	ldi	r26, 0x38	; 56
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e8 e3       	ldi	r30, 0x38	; 56
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <GPIO_writePin+0xe4>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <GPIO_writePin+0xe0>
    1be2:	84 2b       	or	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	6c c0       	rjmp	.+216    	; 0x1cc0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1be8:	a8 e3       	ldi	r26, 0x38	; 56
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e8 e3       	ldi	r30, 0x38	; 56
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <GPIO_writePin+0x10c>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <GPIO_writePin+0x108>
    1c0a:	80 95       	com	r24
    1c0c:	84 23       	and	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	57 c0       	rjmp	.+174    	; 0x1cc0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	a1 f4       	brne	.+40     	; 0x1c40 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c18:	a5 e3       	ldi	r26, 0x35	; 53
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e5 e3       	ldi	r30, 0x35	; 53
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <GPIO_writePin+0x13c>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <GPIO_writePin+0x138>
    1c3a:	84 2b       	or	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	40 c0       	rjmp	.+128    	; 0x1cc0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c40:	a5 e3       	ldi	r26, 0x35	; 53
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e3       	ldi	r30, 0x35	; 53
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <GPIO_writePin+0x164>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <GPIO_writePin+0x160>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	2b c0       	rjmp	.+86     	; 0x1cc0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	a1 f4       	brne	.+40     	; 0x1c98 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c70:	a2 e3       	ldi	r26, 0x32	; 50
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e2 e3       	ldi	r30, 0x32	; 50
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 2e       	mov	r0, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <GPIO_writePin+0x194>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	0a 94       	dec	r0
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <GPIO_writePin+0x190>
    1c92:	84 2b       	or	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c98:	a2 e3       	ldi	r26, 0x32	; 50
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e2 e3       	ldi	r30, 0x32	; 50
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <GPIO_writePin+0x1bc>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <GPIO_writePin+0x1b8>
    1cba:	80 95       	com	r24
    1cbc:	84 23       	and	r24, r20
    1cbe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <GPIO_readPin+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <GPIO_readPin+0x8>
    1cd8:	0f 92       	push	r0
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	8a 83       	std	Y+2, r24	; 0x02
    1ce0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1ce2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	88 30       	cpi	r24, 0x08	; 8
    1ce8:	08 f0       	brcs	.+2      	; 0x1cec <GPIO_readPin+0x1c>
    1cea:	84 c0       	rjmp	.+264    	; 0x1df4 <GPIO_readPin+0x124>
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	84 30       	cpi	r24, 0x04	; 4
    1cf0:	08 f0       	brcs	.+2      	; 0x1cf4 <GPIO_readPin+0x24>
    1cf2:	80 c0       	rjmp	.+256    	; 0x1df4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	3d 83       	std	Y+5, r19	; 0x05
    1cfc:	2c 83       	std	Y+4, r18	; 0x04
    1cfe:	4c 81       	ldd	r20, Y+4	; 0x04
    1d00:	5d 81       	ldd	r21, Y+5	; 0x05
    1d02:	41 30       	cpi	r20, 0x01	; 1
    1d04:	51 05       	cpc	r21, r1
    1d06:	79 f1       	breq	.+94     	; 0x1d66 <GPIO_readPin+0x96>
    1d08:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0c:	82 30       	cpi	r24, 0x02	; 2
    1d0e:	91 05       	cpc	r25, r1
    1d10:	34 f4       	brge	.+12     	; 0x1d1e <GPIO_readPin+0x4e>
    1d12:	2c 81       	ldd	r18, Y+4	; 0x04
    1d14:	3d 81       	ldd	r19, Y+5	; 0x05
    1d16:	21 15       	cp	r18, r1
    1d18:	31 05       	cpc	r19, r1
    1d1a:	69 f0       	breq	.+26     	; 0x1d36 <GPIO_readPin+0x66>
    1d1c:	6b c0       	rjmp	.+214    	; 0x1df4 <GPIO_readPin+0x124>
    1d1e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d20:	5d 81       	ldd	r21, Y+5	; 0x05
    1d22:	42 30       	cpi	r20, 0x02	; 2
    1d24:	51 05       	cpc	r21, r1
    1d26:	b9 f1       	breq	.+110    	; 0x1d96 <GPIO_readPin+0xc6>
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <GPIO_readPin+0x64>
    1d32:	49 c0       	rjmp	.+146    	; 0x1dc6 <GPIO_readPin+0xf6>
    1d34:	5f c0       	rjmp	.+190    	; 0x1df4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d36:	e9 e3       	ldi	r30, 0x39	; 57
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a9 01       	movw	r20, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_readPin+0x7e>
    1d4a:	55 95       	asr	r21
    1d4c:	47 95       	ror	r20
    1d4e:	8a 95       	dec	r24
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <GPIO_readPin+0x7a>
    1d52:	ca 01       	movw	r24, r20
    1d54:	81 70       	andi	r24, 0x01	; 1
    1d56:	90 70       	andi	r25, 0x00	; 0
    1d58:	88 23       	and	r24, r24
    1d5a:	19 f0       	breq	.+6      	; 0x1d62 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	49 c0       	rjmp	.+146    	; 0x1df4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d62:	19 82       	std	Y+1, r1	; 0x01
    1d64:	47 c0       	rjmp	.+142    	; 0x1df4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d66:	e6 e3       	ldi	r30, 0x36	; 54
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a9 01       	movw	r20, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <GPIO_readPin+0xae>
    1d7a:	55 95       	asr	r21
    1d7c:	47 95       	ror	r20
    1d7e:	8a 95       	dec	r24
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <GPIO_readPin+0xaa>
    1d82:	ca 01       	movw	r24, r20
    1d84:	81 70       	andi	r24, 0x01	; 1
    1d86:	90 70       	andi	r25, 0x00	; 0
    1d88:	88 23       	and	r24, r24
    1d8a:	19 f0       	breq	.+6      	; 0x1d92 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	31 c0       	rjmp	.+98     	; 0x1df4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d92:	19 82       	std	Y+1, r1	; 0x01
    1d94:	2f c0       	rjmp	.+94     	; 0x1df4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d96:	e3 e3       	ldi	r30, 0x33	; 51
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a9 01       	movw	r20, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <GPIO_readPin+0xde>
    1daa:	55 95       	asr	r21
    1dac:	47 95       	ror	r20
    1dae:	8a 95       	dec	r24
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <GPIO_readPin+0xda>
    1db2:	ca 01       	movw	r24, r20
    1db4:	81 70       	andi	r24, 0x01	; 1
    1db6:	90 70       	andi	r25, 0x00	; 0
    1db8:	88 23       	and	r24, r24
    1dba:	19 f0       	breq	.+6      	; 0x1dc2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	19 c0       	rjmp	.+50     	; 0x1df4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dc2:	19 82       	std	Y+1, r1	; 0x01
    1dc4:	17 c0       	rjmp	.+46     	; 0x1df4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1dc6:	e0 e3       	ldi	r30, 0x30	; 48
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	88 2f       	mov	r24, r24
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a9 01       	movw	r20, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <GPIO_readPin+0x10e>
    1dda:	55 95       	asr	r21
    1ddc:	47 95       	ror	r20
    1dde:	8a 95       	dec	r24
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <GPIO_readPin+0x10a>
    1de2:	ca 01       	movw	r24, r20
    1de4:	81 70       	andi	r24, 0x01	; 1
    1de6:	90 70       	andi	r25, 0x00	; 0
    1de8:	88 23       	and	r24, r24
    1dea:	19 f0       	breq	.+6      	; 0x1df2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1df2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <GPIO_setupPortDirection+0x6>
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <GPIO_setupPortDirection+0x8>
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	90 f5       	brcc	.+100    	; 0x1e80 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	3c 83       	std	Y+4, r19	; 0x04
    1e24:	2b 83       	std	Y+3, r18	; 0x03
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	d1 f0       	breq	.+52     	; 0x1e64 <GPIO_setupPortDirection+0x5e>
    1e30:	2b 81       	ldd	r18, Y+3	; 0x03
    1e32:	3c 81       	ldd	r19, Y+4	; 0x04
    1e34:	22 30       	cpi	r18, 0x02	; 2
    1e36:	31 05       	cpc	r19, r1
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <GPIO_setupPortDirection+0x3e>
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	61 f0       	breq	.+24     	; 0x1e5a <GPIO_setupPortDirection+0x54>
    1e42:	1e c0       	rjmp	.+60     	; 0x1e80 <GPIO_setupPortDirection+0x7a>
    1e44:	2b 81       	ldd	r18, Y+3	; 0x03
    1e46:	3c 81       	ldd	r19, Y+4	; 0x04
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	81 f0       	breq	.+32     	; 0x1e6e <GPIO_setupPortDirection+0x68>
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	83 30       	cpi	r24, 0x03	; 3
    1e54:	91 05       	cpc	r25, r1
    1e56:	81 f0       	breq	.+32     	; 0x1e78 <GPIO_setupPortDirection+0x72>
    1e58:	13 c0       	rjmp	.+38     	; 0x1e80 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e5a:	ea e3       	ldi	r30, 0x3A	; 58
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	80 83       	st	Z, r24
    1e62:	0e c0       	rjmp	.+28     	; 0x1e80 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e64:	e7 e3       	ldi	r30, 0x37	; 55
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	80 83       	st	Z, r24
    1e6c:	09 c0       	rjmp	.+18     	; 0x1e80 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e6e:	e4 e3       	ldi	r30, 0x34	; 52
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	80 83       	st	Z, r24
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e78:	e1 e3       	ldi	r30, 0x31	; 49
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <GPIO_writePort+0x6>
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <GPIO_writePort+0x8>
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	84 30       	cpi	r24, 0x04	; 4
    1ea2:	90 f5       	brcc	.+100    	; 0x1f08 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	3c 83       	std	Y+4, r19	; 0x04
    1eac:	2b 83       	std	Y+3, r18	; 0x03
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb2:	81 30       	cpi	r24, 0x01	; 1
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	d1 f0       	breq	.+52     	; 0x1eec <GPIO_writePort+0x5e>
    1eb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eba:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebc:	22 30       	cpi	r18, 0x02	; 2
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <GPIO_writePort+0x3e>
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	61 f0       	breq	.+24     	; 0x1ee2 <GPIO_writePort+0x54>
    1eca:	1e c0       	rjmp	.+60     	; 0x1f08 <GPIO_writePort+0x7a>
    1ecc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ece:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed0:	22 30       	cpi	r18, 0x02	; 2
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	81 f0       	breq	.+32     	; 0x1ef6 <GPIO_writePort+0x68>
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	91 05       	cpc	r25, r1
    1ede:	81 f0       	breq	.+32     	; 0x1f00 <GPIO_writePort+0x72>
    1ee0:	13 c0       	rjmp	.+38     	; 0x1f08 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ee2:	eb e3       	ldi	r30, 0x3B	; 59
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	80 83       	st	Z, r24
    1eea:	0e c0       	rjmp	.+28     	; 0x1f08 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1eec:	e8 e3       	ldi	r30, 0x38	; 56
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	80 83       	st	Z, r24
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ef6:	e5 e3       	ldi	r30, 0x35	; 53
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	80 83       	st	Z, r24
    1efe:	04 c0       	rjmp	.+8      	; 0x1f08 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f00:	e2 e3       	ldi	r30, 0x32	; 50
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <GPIO_readPort+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <GPIO_readPort+0x8>
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f24:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	84 30       	cpi	r24, 0x04	; 4
    1f2a:	90 f5       	brcc	.+100    	; 0x1f90 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	3c 83       	std	Y+4, r19	; 0x04
    1f34:	2b 83       	std	Y+3, r18	; 0x03
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	d1 f0       	breq	.+52     	; 0x1f74 <GPIO_readPort+0x5e>
    1f40:	2b 81       	ldd	r18, Y+3	; 0x03
    1f42:	3c 81       	ldd	r19, Y+4	; 0x04
    1f44:	22 30       	cpi	r18, 0x02	; 2
    1f46:	31 05       	cpc	r19, r1
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <GPIO_readPort+0x3e>
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <GPIO_readPort+0x54>
    1f52:	1e c0       	rjmp	.+60     	; 0x1f90 <GPIO_readPort+0x7a>
    1f54:	2b 81       	ldd	r18, Y+3	; 0x03
    1f56:	3c 81       	ldd	r19, Y+4	; 0x04
    1f58:	22 30       	cpi	r18, 0x02	; 2
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	81 f0       	breq	.+32     	; 0x1f7e <GPIO_readPort+0x68>
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	91 05       	cpc	r25, r1
    1f66:	81 f0       	breq	.+32     	; 0x1f88 <GPIO_readPort+0x72>
    1f68:	13 c0       	rjmp	.+38     	; 0x1f90 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f6a:	e9 e3       	ldi	r30, 0x39	; 57
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	0e c0       	rjmp	.+28     	; 0x1f90 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f74:	e6 e3       	ldi	r30, 0x36	; 54
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	09 c0       	rjmp	.+18     	; 0x1f90 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f7e:	e3 e3       	ldi	r30, 0x33	; 51
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	04 c0       	rjmp	.+8      	; 0x1f90 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f88:	e0 e3       	ldi	r30, 0x30	; 48
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <KEYPAD_getPressedKey+0x6>
    1fa6:	0f 92       	push	r0
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1fac:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1fae:	1b 82       	std	Y+3, r1	; 0x03
    1fb0:	43 c0       	rjmp	.+134    	; 0x2038 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	9c 5f       	subi	r25, 0xFC	; 252
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	69 2f       	mov	r22, r25
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 92 0c 	call	0x1924	; 0x1924 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9c 01       	movw	r18, r24
    1fd2:	2c 5f       	subi	r18, 0xFC	; 252
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <KEYPAD_getPressedKey+0x40>
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	2a 95       	dec	r18
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <KEYPAD_getPressedKey+0x3c>
    1fe4:	80 95       	com	r24
    1fe6:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	69 81       	ldd	r22, Y+1	; 0x01
    1fec:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ff0:	1a 82       	std	Y+2, r1	; 0x02
    1ff2:	1c c0       	rjmp	.+56     	; 0x202c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ff8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <GPIO_readPin>
    1ffc:	88 23       	and	r24, r24
    1ffe:	99 f4       	brne	.+38     	; 0x2026 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	88 2f       	mov	r24, r24
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	98 2f       	mov	r25, r24
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	89 0f       	add	r24, r25
    2014:	8f 5f       	subi	r24, 0xFF	; 255
    2016:	0e 94 21 10 	call	0x2042	; 0x2042 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	8f 5f       	subi	r24, 0xFF	; 255
    202a:	8a 83       	std	Y+2, r24	; 0x02
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	84 30       	cpi	r24, 0x04	; 4
    2030:	08 f3       	brcs	.-62     	; 0x1ff4 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	8f 5f       	subi	r24, 0xFF	; 255
    2036:	8b 83       	std	Y+3, r24	; 0x03
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	84 30       	cpi	r24, 0x04	; 4
    203c:	08 f4       	brcc	.+2      	; 0x2040 <KEYPAD_getPressedKey+0xa0>
    203e:	b9 cf       	rjmp	.-142    	; 0x1fb2 <KEYPAD_getPressedKey+0x12>
    2040:	b6 cf       	rjmp	.-148    	; 0x1fae <KEYPAD_getPressedKey+0xe>

00002042 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <KEYPAD_4x4_adjustKeyNumber+0x8>
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2050:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	3c 83       	std	Y+4, r19	; 0x04
    205a:	2b 83       	std	Y+3, r18	; 0x03
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	88 30       	cpi	r24, 0x08	; 8
    2062:	91 05       	cpc	r25, r1
    2064:	09 f4       	brne	.+2      	; 0x2068 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2066:	70 c0       	rjmp	.+224    	; 0x2148 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2068:	2b 81       	ldd	r18, Y+3	; 0x03
    206a:	3c 81       	ldd	r19, Y+4	; 0x04
    206c:	29 30       	cpi	r18, 0x09	; 9
    206e:	31 05       	cpc	r19, r1
    2070:	5c f5       	brge	.+86     	; 0x20c8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	9c 81       	ldd	r25, Y+4	; 0x04
    2076:	84 30       	cpi	r24, 0x04	; 4
    2078:	91 05       	cpc	r25, r1
    207a:	09 f4       	brne	.+2      	; 0x207e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    207c:	59 c0       	rjmp	.+178    	; 0x2130 <KEYPAD_4x4_adjustKeyNumber+0xee>
    207e:	2b 81       	ldd	r18, Y+3	; 0x03
    2080:	3c 81       	ldd	r19, Y+4	; 0x04
    2082:	25 30       	cpi	r18, 0x05	; 5
    2084:	31 05       	cpc	r19, r1
    2086:	9c f4       	brge	.+38     	; 0x20ae <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	82 30       	cpi	r24, 0x02	; 2
    208e:	91 05       	cpc	r25, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2092:	48 c0       	rjmp	.+144    	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2094:	2b 81       	ldd	r18, Y+3	; 0x03
    2096:	3c 81       	ldd	r19, Y+4	; 0x04
    2098:	23 30       	cpi	r18, 0x03	; 3
    209a:	31 05       	cpc	r19, r1
    209c:	0c f0       	brlt	.+2      	; 0x20a0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    209e:	45 c0       	rjmp	.+138    	; 0x212a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	81 30       	cpi	r24, 0x01	; 1
    20a6:	91 05       	cpc	r25, r1
    20a8:	09 f4       	brne	.+2      	; 0x20ac <KEYPAD_4x4_adjustKeyNumber+0x6a>
    20aa:	39 c0       	rjmp	.+114    	; 0x211e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    20ac:	67 c0       	rjmp	.+206    	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    20ae:	2b 81       	ldd	r18, Y+3	; 0x03
    20b0:	3c 81       	ldd	r19, Y+4	; 0x04
    20b2:	26 30       	cpi	r18, 0x06	; 6
    20b4:	31 05       	cpc	r19, r1
    20b6:	09 f4       	brne	.+2      	; 0x20ba <KEYPAD_4x4_adjustKeyNumber+0x78>
    20b8:	41 c0       	rjmp	.+130    	; 0x213c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	87 30       	cpi	r24, 0x07	; 7
    20c0:	91 05       	cpc	r25, r1
    20c2:	0c f0       	brlt	.+2      	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    20c4:	3e c0       	rjmp	.+124    	; 0x2142 <KEYPAD_4x4_adjustKeyNumber+0x100>
    20c6:	37 c0       	rjmp	.+110    	; 0x2136 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    20c8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ca:	3c 81       	ldd	r19, Y+4	; 0x04
    20cc:	2c 30       	cpi	r18, 0x0C	; 12
    20ce:	31 05       	cpc	r19, r1
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    20d2:	46 c0       	rjmp	.+140    	; 0x2160 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	8d 30       	cpi	r24, 0x0D	; 13
    20da:	91 05       	cpc	r25, r1
    20dc:	5c f4       	brge	.+22     	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    20de:	2b 81       	ldd	r18, Y+3	; 0x03
    20e0:	3c 81       	ldd	r19, Y+4	; 0x04
    20e2:	2a 30       	cpi	r18, 0x0A	; 10
    20e4:	31 05       	cpc	r19, r1
    20e6:	b1 f1       	breq	.+108    	; 0x2154 <KEYPAD_4x4_adjustKeyNumber+0x112>
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	8b 30       	cpi	r24, 0x0B	; 11
    20ee:	91 05       	cpc	r25, r1
    20f0:	a4 f5       	brge	.+104    	; 0x215a <KEYPAD_4x4_adjustKeyNumber+0x118>
    20f2:	2d c0       	rjmp	.+90     	; 0x214e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    20f4:	2b 81       	ldd	r18, Y+3	; 0x03
    20f6:	3c 81       	ldd	r19, Y+4	; 0x04
    20f8:	2e 30       	cpi	r18, 0x0E	; 14
    20fa:	31 05       	cpc	r19, r1
    20fc:	b9 f1       	breq	.+110    	; 0x216c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	8e 30       	cpi	r24, 0x0E	; 14
    2104:	91 05       	cpc	r25, r1
    2106:	7c f1       	brlt	.+94     	; 0x2166 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2108:	2b 81       	ldd	r18, Y+3	; 0x03
    210a:	3c 81       	ldd	r19, Y+4	; 0x04
    210c:	2f 30       	cpi	r18, 0x0F	; 15
    210e:	31 05       	cpc	r19, r1
    2110:	79 f1       	breq	.+94     	; 0x2170 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	80 31       	cpi	r24, 0x10	; 16
    2118:	91 05       	cpc	r25, r1
    211a:	69 f1       	breq	.+90     	; 0x2176 <KEYPAD_4x4_adjustKeyNumber+0x134>
    211c:	2f c0       	rjmp	.+94     	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    211e:	87 e0       	ldi	r24, 0x07	; 7
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	2e c0       	rjmp	.+92     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2124:	88 e0       	ldi	r24, 0x08	; 8
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	2b c0       	rjmp	.+86     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    212a:	89 e0       	ldi	r24, 0x09	; 9
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	28 c0       	rjmp	.+80     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2130:	85 e2       	ldi	r24, 0x25	; 37
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	25 c0       	rjmp	.+74     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2136:	84 e0       	ldi	r24, 0x04	; 4
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	22 c0       	rjmp	.+68     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    213c:	85 e0       	ldi	r24, 0x05	; 5
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	1f c0       	rjmp	.+62     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2142:	86 e0       	ldi	r24, 0x06	; 6
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	1c c0       	rjmp	.+56     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2148:	8a e2       	ldi	r24, 0x2A	; 42
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	19 c0       	rjmp	.+50     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	16 c0       	rjmp	.+44     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	13 c0       	rjmp	.+38     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	10 c0       	rjmp	.+32     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2160:	8d e2       	ldi	r24, 0x2D	; 45
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	0d c0       	rjmp	.+26     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2166:	8d e0       	ldi	r24, 0x0D	; 13
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	0a c0       	rjmp	.+20     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    216c:	19 82       	std	Y+1, r1	; 0x01
    216e:	08 c0       	rjmp	.+16     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2170:	8d e3       	ldi	r24, 0x3D	; 61
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2176:	8b e2       	ldi	r24, 0x2B	; 43
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2180:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	64 e0       	ldi	r22, 0x04	; 4
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	0e 94 92 0c 	call	0x1924	; 0x1924 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	65 e0       	ldi	r22, 0x05	; 5
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 92 0c 	call	0x1924	; 0x1924 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    21ac:	83 e0       	ldi	r24, 0x03	; 3
    21ae:	66 e0       	ldi	r22, 0x06	; 6
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 92 0c 	call	0x1924	; 0x1924 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    21b6:	82 e0       	ldi	r24, 0x02	; 2
    21b8:	6f ef       	ldi	r22, 0xFF	; 255
    21ba:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    21be:	88 e3       	ldi	r24, 0x38	; 56
    21c0:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    21c4:	8c e0       	ldi	r24, 0x0C	; 12
    21c6:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_sendCommand>
}
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	e9 97       	sbiw	r28, 0x39	; 57
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    21ec:	83 e0       	ldi	r24, 0x03	; 3
    21ee:	64 e0       	ldi	r22, 0x04	; 4
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    21f6:	83 e0       	ldi	r24, 0x03	; 3
    21f8:	65 e0       	ldi	r22, 0x05	; 5
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_writePin>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	a0 e8       	ldi	r26, 0x80	; 128
    2206:	bf e3       	ldi	r27, 0x3F	; 63
    2208:	8d ab       	std	Y+53, r24	; 0x35
    220a:	9e ab       	std	Y+54, r25	; 0x36
    220c:	af ab       	std	Y+55, r26	; 0x37
    220e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	6d a9       	ldd	r22, Y+53	; 0x35
    2212:	7e a9       	ldd	r23, Y+54	; 0x36
    2214:	8f a9       	ldd	r24, Y+55	; 0x37
    2216:	98 ad       	ldd	r25, Y+56	; 0x38
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	4a ef       	ldi	r20, 0xFA	; 250
    221e:	54 e4       	ldi	r21, 0x44	; 68
    2220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	89 ab       	std	Y+49, r24	; 0x31
    222a:	9a ab       	std	Y+50, r25	; 0x32
    222c:	ab ab       	std	Y+51, r26	; 0x33
    222e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2230:	69 a9       	ldd	r22, Y+49	; 0x31
    2232:	7a a9       	ldd	r23, Y+50	; 0x32
    2234:	8b a9       	ldd	r24, Y+51	; 0x33
    2236:	9c a9       	ldd	r25, Y+52	; 0x34
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	2c f4       	brge	.+10     	; 0x2252 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	98 ab       	std	Y+48, r25	; 0x30
    224e:	8f a7       	std	Y+47, r24	; 0x2f
    2250:	3f c0       	rjmp	.+126    	; 0x22d0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2252:	69 a9       	ldd	r22, Y+49	; 0x31
    2254:	7a a9       	ldd	r23, Y+50	; 0x32
    2256:	8b a9       	ldd	r24, Y+51	; 0x33
    2258:	9c a9       	ldd	r25, Y+52	; 0x34
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	3f ef       	ldi	r19, 0xFF	; 255
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	57 e4       	ldi	r21, 0x47	; 71
    2262:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	4c f5       	brge	.+82     	; 0x22bc <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	6d a9       	ldd	r22, Y+53	; 0x35
    226c:	7e a9       	ldd	r23, Y+54	; 0x36
    226e:	8f a9       	ldd	r24, Y+55	; 0x37
    2270:	98 ad       	ldd	r25, Y+56	; 0x38
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e2       	ldi	r20, 0x20	; 32
    2278:	51 e4       	ldi	r21, 0x41	; 65
    227a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	98 ab       	std	Y+48, r25	; 0x30
    2290:	8f a7       	std	Y+47, r24	; 0x2f
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <LCD_sendCommand+0xdc>
    2294:	88 ec       	ldi	r24, 0xC8	; 200
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9e a7       	std	Y+46, r25	; 0x2e
    229a:	8d a7       	std	Y+45, r24	; 0x2d
    229c:	8d a5       	ldd	r24, Y+45	; 0x2d
    229e:	9e a5       	ldd	r25, Y+46	; 0x2e
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <LCD_sendCommand+0xca>
    22a4:	9e a7       	std	Y+46, r25	; 0x2e
    22a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22aa:	98 a9       	ldd	r25, Y+48	; 0x30
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	98 ab       	std	Y+48, r25	; 0x30
    22b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b4:	98 a9       	ldd	r25, Y+48	; 0x30
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	69 f7       	brne	.-38     	; 0x2294 <LCD_sendCommand+0xbe>
    22ba:	14 c0       	rjmp	.+40     	; 0x22e4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	69 a9       	ldd	r22, Y+49	; 0x31
    22be:	7a a9       	ldd	r23, Y+50	; 0x32
    22c0:	8b a9       	ldd	r24, Y+51	; 0x33
    22c2:	9c a9       	ldd	r25, Y+52	; 0x34
    22c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	98 ab       	std	Y+48, r25	; 0x30
    22ce:	8f a7       	std	Y+47, r24	; 0x2f
    22d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d2:	98 a9       	ldd	r25, Y+48	; 0x30
    22d4:	9c a7       	std	Y+44, r25	; 0x2c
    22d6:	8b a7       	std	Y+43, r24	; 0x2b
    22d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22da:	9c a5       	ldd	r25, Y+44	; 0x2c
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <LCD_sendCommand+0x106>
    22e0:	9c a7       	std	Y+44, r25	; 0x2c
    22e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22e4:	83 e0       	ldi	r24, 0x03	; 3
    22e6:	66 e0       	ldi	r22, 0x06	; 6
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_writePin>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a0 e8       	ldi	r26, 0x80	; 128
    22f4:	bf e3       	ldi	r27, 0x3F	; 63
    22f6:	8f a3       	std	Y+39, r24	; 0x27
    22f8:	98 a7       	std	Y+40, r25	; 0x28
    22fa:	a9 a7       	std	Y+41, r26	; 0x29
    22fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2300:	78 a5       	ldd	r23, Y+40	; 0x28
    2302:	89 a5       	ldd	r24, Y+41	; 0x29
    2304:	9a a5       	ldd	r25, Y+42	; 0x2a
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	4a ef       	ldi	r20, 0xFA	; 250
    230c:	54 e4       	ldi	r21, 0x44	; 68
    230e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	8b a3       	std	Y+35, r24	; 0x23
    2318:	9c a3       	std	Y+36, r25	; 0x24
    231a:	ad a3       	std	Y+37, r26	; 0x25
    231c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    231e:	6b a1       	ldd	r22, Y+35	; 0x23
    2320:	7c a1       	ldd	r23, Y+36	; 0x24
    2322:	8d a1       	ldd	r24, Y+37	; 0x25
    2324:	9e a1       	ldd	r25, Y+38	; 0x26
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	5f e3       	ldi	r21, 0x3F	; 63
    232e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2332:	88 23       	and	r24, r24
    2334:	2c f4       	brge	.+10     	; 0x2340 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9a a3       	std	Y+34, r25	; 0x22
    233c:	89 a3       	std	Y+33, r24	; 0x21
    233e:	3f c0       	rjmp	.+126    	; 0x23be <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2340:	6b a1       	ldd	r22, Y+35	; 0x23
    2342:	7c a1       	ldd	r23, Y+36	; 0x24
    2344:	8d a1       	ldd	r24, Y+37	; 0x25
    2346:	9e a1       	ldd	r25, Y+38	; 0x26
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	3f ef       	ldi	r19, 0xFF	; 255
    234c:	4f e7       	ldi	r20, 0x7F	; 127
    234e:	57 e4       	ldi	r21, 0x47	; 71
    2350:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2354:	18 16       	cp	r1, r24
    2356:	4c f5       	brge	.+82     	; 0x23aa <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	6f a1       	ldd	r22, Y+39	; 0x27
    235a:	78 a5       	ldd	r23, Y+40	; 0x28
    235c:	89 a5       	ldd	r24, Y+41	; 0x29
    235e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e2       	ldi	r20, 0x20	; 32
    2366:	51 e4       	ldi	r21, 0x41	; 65
    2368:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	bc 01       	movw	r22, r24
    2372:	cd 01       	movw	r24, r26
    2374:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9a a3       	std	Y+34, r25	; 0x22
    237e:	89 a3       	std	Y+33, r24	; 0x21
    2380:	0f c0       	rjmp	.+30     	; 0x23a0 <LCD_sendCommand+0x1ca>
    2382:	88 ec       	ldi	r24, 0xC8	; 200
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	98 a3       	std	Y+32, r25	; 0x20
    2388:	8f 8f       	std	Y+31, r24	; 0x1f
    238a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    238c:	98 a1       	ldd	r25, Y+32	; 0x20
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <LCD_sendCommand+0x1b8>
    2392:	98 a3       	std	Y+32, r25	; 0x20
    2394:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2396:	89 a1       	ldd	r24, Y+33	; 0x21
    2398:	9a a1       	ldd	r25, Y+34	; 0x22
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	9a a3       	std	Y+34, r25	; 0x22
    239e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a0:	89 a1       	ldd	r24, Y+33	; 0x21
    23a2:	9a a1       	ldd	r25, Y+34	; 0x22
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	69 f7       	brne	.-38     	; 0x2382 <LCD_sendCommand+0x1ac>
    23a8:	14 c0       	rjmp	.+40     	; 0x23d2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23aa:	6b a1       	ldd	r22, Y+35	; 0x23
    23ac:	7c a1       	ldd	r23, Y+36	; 0x24
    23ae:	8d a1       	ldd	r24, Y+37	; 0x25
    23b0:	9e a1       	ldd	r25, Y+38	; 0x26
    23b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9a a3       	std	Y+34, r25	; 0x22
    23bc:	89 a3       	std	Y+33, r24	; 0x21
    23be:	89 a1       	ldd	r24, Y+33	; 0x21
    23c0:	9a a1       	ldd	r25, Y+34	; 0x22
    23c2:	9e 8f       	std	Y+30, r25	; 0x1e
    23c4:	8d 8f       	std	Y+29, r24	; 0x1d
    23c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <LCD_sendCommand+0x1f4>
    23ce:	9e 8f       	std	Y+30, r25	; 0x1e
    23d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	69 ad       	ldd	r22, Y+57	; 0x39
    23d6:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <GPIO_writePort>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a0 e8       	ldi	r26, 0x80	; 128
    23e0:	bf e3       	ldi	r27, 0x3F	; 63
    23e2:	89 8f       	std	Y+25, r24	; 0x19
    23e4:	9a 8f       	std	Y+26, r25	; 0x1a
    23e6:	ab 8f       	std	Y+27, r26	; 0x1b
    23e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ea:	69 8d       	ldd	r22, Y+25	; 0x19
    23ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	4a ef       	ldi	r20, 0xFA	; 250
    23f8:	54 e4       	ldi	r21, 0x44	; 68
    23fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	8d 8b       	std	Y+21, r24	; 0x15
    2404:	9e 8b       	std	Y+22, r25	; 0x16
    2406:	af 8b       	std	Y+23, r26	; 0x17
    2408:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    240a:	6d 89       	ldd	r22, Y+21	; 0x15
    240c:	7e 89       	ldd	r23, Y+22	; 0x16
    240e:	8f 89       	ldd	r24, Y+23	; 0x17
    2410:	98 8d       	ldd	r25, Y+24	; 0x18
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5f e3       	ldi	r21, 0x3F	; 63
    241a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    241e:	88 23       	and	r24, r24
    2420:	2c f4       	brge	.+10     	; 0x242c <LCD_sendCommand+0x256>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9c 8b       	std	Y+20, r25	; 0x14
    2428:	8b 8b       	std	Y+19, r24	; 0x13
    242a:	3f c0       	rjmp	.+126    	; 0x24aa <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    242c:	6d 89       	ldd	r22, Y+21	; 0x15
    242e:	7e 89       	ldd	r23, Y+22	; 0x16
    2430:	8f 89       	ldd	r24, Y+23	; 0x17
    2432:	98 8d       	ldd	r25, Y+24	; 0x18
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	3f ef       	ldi	r19, 0xFF	; 255
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	57 e4       	ldi	r21, 0x47	; 71
    243c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	4c f5       	brge	.+82     	; 0x2496 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	69 8d       	ldd	r22, Y+25	; 0x19
    2446:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2448:	8b 8d       	ldd	r24, Y+27	; 0x1b
    244a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9c 8b       	std	Y+20, r25	; 0x14
    246a:	8b 8b       	std	Y+19, r24	; 0x13
    246c:	0f c0       	rjmp	.+30     	; 0x248c <LCD_sendCommand+0x2b6>
    246e:	88 ec       	ldi	r24, 0xC8	; 200
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	9a 8b       	std	Y+18, r25	; 0x12
    2474:	89 8b       	std	Y+17, r24	; 0x11
    2476:	89 89       	ldd	r24, Y+17	; 0x11
    2478:	9a 89       	ldd	r25, Y+18	; 0x12
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <LCD_sendCommand+0x2a4>
    247e:	9a 8b       	std	Y+18, r25	; 0x12
    2480:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2482:	8b 89       	ldd	r24, Y+19	; 0x13
    2484:	9c 89       	ldd	r25, Y+20	; 0x14
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9c 8b       	std	Y+20, r25	; 0x14
    248a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	8b 89       	ldd	r24, Y+19	; 0x13
    248e:	9c 89       	ldd	r25, Y+20	; 0x14
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	69 f7       	brne	.-38     	; 0x246e <LCD_sendCommand+0x298>
    2494:	14 c0       	rjmp	.+40     	; 0x24be <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2496:	6d 89       	ldd	r22, Y+21	; 0x15
    2498:	7e 89       	ldd	r23, Y+22	; 0x16
    249a:	8f 89       	ldd	r24, Y+23	; 0x17
    249c:	98 8d       	ldd	r25, Y+24	; 0x18
    249e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9c 8b       	std	Y+20, r25	; 0x14
    24a8:	8b 8b       	std	Y+19, r24	; 0x13
    24aa:	8b 89       	ldd	r24, Y+19	; 0x13
    24ac:	9c 89       	ldd	r25, Y+20	; 0x14
    24ae:	98 8b       	std	Y+16, r25	; 0x10
    24b0:	8f 87       	std	Y+15, r24	; 0x0f
    24b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b4:	98 89       	ldd	r25, Y+16	; 0x10
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_sendCommand+0x2e0>
    24ba:	98 8b       	std	Y+16, r25	; 0x10
    24bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	66 e0       	ldi	r22, 0x06	; 6
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_writePin>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e8       	ldi	r26, 0x80	; 128
    24ce:	bf e3       	ldi	r27, 0x3F	; 63
    24d0:	8b 87       	std	Y+11, r24	; 0x0b
    24d2:	9c 87       	std	Y+12, r25	; 0x0c
    24d4:	ad 87       	std	Y+13, r26	; 0x0d
    24d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24da:	7c 85       	ldd	r23, Y+12	; 0x0c
    24dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24de:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4a ef       	ldi	r20, 0xFA	; 250
    24e6:	54 e4       	ldi	r21, 0x44	; 68
    24e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8f 83       	std	Y+7, r24	; 0x07
    24f2:	98 87       	std	Y+8, r25	; 0x08
    24f4:	a9 87       	std	Y+9, r26	; 0x09
    24f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <LCD_sendCommand+0x344>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	4c f5       	brge	.+82     	; 0x2584 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	6b 85       	ldd	r22, Y+11	; 0x0b
    2534:	7c 85       	ldd	r23, Y+12	; 0x0c
    2536:	8d 85       	ldd	r24, Y+13	; 0x0d
    2538:	9e 85       	ldd	r25, Y+14	; 0x0e
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
    255a:	0f c0       	rjmp	.+30     	; 0x257a <LCD_sendCommand+0x3a4>
    255c:	88 ec       	ldi	r24, 0xC8	; 200
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <LCD_sendCommand+0x392>
    256c:	9c 83       	std	Y+4, r25	; 0x04
    256e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <LCD_sendCommand+0x386>
    2582:	14 c0       	rjmp	.+40     	; 0x25ac <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	9a 81       	ldd	r25, Y+2	; 0x02
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_sendCommand+0x3ce>
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    25ac:	e9 96       	adiw	r28, 0x39	; 57
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	e9 97       	sbiw	r28, 0x39	; 57
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	64 e0       	ldi	r22, 0x04	; 4
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	65 e0       	ldi	r22, 0x05	; 5
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_writePin>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e8       	ldi	r26, 0x80	; 128
    25ee:	bf e3       	ldi	r27, 0x3F	; 63
    25f0:	8d ab       	std	Y+53, r24	; 0x35
    25f2:	9e ab       	std	Y+54, r25	; 0x36
    25f4:	af ab       	std	Y+55, r26	; 0x37
    25f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f8:	6d a9       	ldd	r22, Y+53	; 0x35
    25fa:	7e a9       	ldd	r23, Y+54	; 0x36
    25fc:	8f a9       	ldd	r24, Y+55	; 0x37
    25fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4a ef       	ldi	r20, 0xFA	; 250
    2606:	54 e4       	ldi	r21, 0x44	; 68
    2608:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	89 ab       	std	Y+49, r24	; 0x31
    2612:	9a ab       	std	Y+50, r25	; 0x32
    2614:	ab ab       	std	Y+51, r26	; 0x33
    2616:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2618:	69 a9       	ldd	r22, Y+49	; 0x31
    261a:	7a a9       	ldd	r23, Y+50	; 0x32
    261c:	8b a9       	ldd	r24, Y+51	; 0x33
    261e:	9c a9       	ldd	r25, Y+52	; 0x34
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e8       	ldi	r20, 0x80	; 128
    2626:	5f e3       	ldi	r21, 0x3F	; 63
    2628:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    262c:	88 23       	and	r24, r24
    262e:	2c f4       	brge	.+10     	; 0x263a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	98 ab       	std	Y+48, r25	; 0x30
    2636:	8f a7       	std	Y+47, r24	; 0x2f
    2638:	3f c0       	rjmp	.+126    	; 0x26b8 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    263a:	69 a9       	ldd	r22, Y+49	; 0x31
    263c:	7a a9       	ldd	r23, Y+50	; 0x32
    263e:	8b a9       	ldd	r24, Y+51	; 0x33
    2640:	9c a9       	ldd	r25, Y+52	; 0x34
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	4c f5       	brge	.+82     	; 0x26a4 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2652:	6d a9       	ldd	r22, Y+53	; 0x35
    2654:	7e a9       	ldd	r23, Y+54	; 0x36
    2656:	8f a9       	ldd	r24, Y+55	; 0x37
    2658:	98 ad       	ldd	r25, Y+56	; 0x38
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e2       	ldi	r20, 0x20	; 32
    2660:	51 e4       	ldi	r21, 0x41	; 65
    2662:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	98 ab       	std	Y+48, r25	; 0x30
    2678:	8f a7       	std	Y+47, r24	; 0x2f
    267a:	0f c0       	rjmp	.+30     	; 0x269a <LCD_displayCharacter+0xdc>
    267c:	88 ec       	ldi	r24, 0xC8	; 200
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9e a7       	std	Y+46, r25	; 0x2e
    2682:	8d a7       	std	Y+45, r24	; 0x2d
    2684:	8d a5       	ldd	r24, Y+45	; 0x2d
    2686:	9e a5       	ldd	r25, Y+46	; 0x2e
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LCD_displayCharacter+0xca>
    268c:	9e a7       	std	Y+46, r25	; 0x2e
    268e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2690:	8f a5       	ldd	r24, Y+47	; 0x2f
    2692:	98 a9       	ldd	r25, Y+48	; 0x30
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	98 ab       	std	Y+48, r25	; 0x30
    2698:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269a:	8f a5       	ldd	r24, Y+47	; 0x2f
    269c:	98 a9       	ldd	r25, Y+48	; 0x30
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	69 f7       	brne	.-38     	; 0x267c <LCD_displayCharacter+0xbe>
    26a2:	14 c0       	rjmp	.+40     	; 0x26cc <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a4:	69 a9       	ldd	r22, Y+49	; 0x31
    26a6:	7a a9       	ldd	r23, Y+50	; 0x32
    26a8:	8b a9       	ldd	r24, Y+51	; 0x33
    26aa:	9c a9       	ldd	r25, Y+52	; 0x34
    26ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	98 ab       	std	Y+48, r25	; 0x30
    26b6:	8f a7       	std	Y+47, r24	; 0x2f
    26b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ba:	98 a9       	ldd	r25, Y+48	; 0x30
    26bc:	9c a7       	std	Y+44, r25	; 0x2c
    26be:	8b a7       	std	Y+43, r24	; 0x2b
    26c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_displayCharacter+0x106>
    26c8:	9c a7       	std	Y+44, r25	; 0x2c
    26ca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26cc:	83 e0       	ldi	r24, 0x03	; 3
    26ce:	66 e0       	ldi	r22, 0x06	; 6
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_writePin>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a0 e8       	ldi	r26, 0x80	; 128
    26dc:	bf e3       	ldi	r27, 0x3F	; 63
    26de:	8f a3       	std	Y+39, r24	; 0x27
    26e0:	98 a7       	std	Y+40, r25	; 0x28
    26e2:	a9 a7       	std	Y+41, r26	; 0x29
    26e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	6f a1       	ldd	r22, Y+39	; 0x27
    26e8:	78 a5       	ldd	r23, Y+40	; 0x28
    26ea:	89 a5       	ldd	r24, Y+41	; 0x29
    26ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a ef       	ldi	r20, 0xFA	; 250
    26f4:	54 e4       	ldi	r21, 0x44	; 68
    26f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	8b a3       	std	Y+35, r24	; 0x23
    2700:	9c a3       	std	Y+36, r25	; 0x24
    2702:	ad a3       	std	Y+37, r26	; 0x25
    2704:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2706:	6b a1       	ldd	r22, Y+35	; 0x23
    2708:	7c a1       	ldd	r23, Y+36	; 0x24
    270a:	8d a1       	ldd	r24, Y+37	; 0x25
    270c:	9e a1       	ldd	r25, Y+38	; 0x26
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9a a3       	std	Y+34, r25	; 0x22
    2724:	89 a3       	std	Y+33, r24	; 0x21
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2728:	6b a1       	ldd	r22, Y+35	; 0x23
    272a:	7c a1       	ldd	r23, Y+36	; 0x24
    272c:	8d a1       	ldd	r24, Y+37	; 0x25
    272e:	9e a1       	ldd	r25, Y+38	; 0x26
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	6f a1       	ldd	r22, Y+39	; 0x27
    2742:	78 a5       	ldd	r23, Y+40	; 0x28
    2744:	89 a5       	ldd	r24, Y+41	; 0x29
    2746:	9a a5       	ldd	r25, Y+42	; 0x2a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9a a3       	std	Y+34, r25	; 0x22
    2766:	89 a3       	std	Y+33, r24	; 0x21
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <LCD_displayCharacter+0x1ca>
    276a:	88 ec       	ldi	r24, 0xC8	; 200
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	98 a3       	std	Y+32, r25	; 0x20
    2770:	8f 8f       	std	Y+31, r24	; 0x1f
    2772:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2774:	98 a1       	ldd	r25, Y+32	; 0x20
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_displayCharacter+0x1b8>
    277a:	98 a3       	std	Y+32, r25	; 0x20
    277c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	89 a1       	ldd	r24, Y+33	; 0x21
    2780:	9a a1       	ldd	r25, Y+34	; 0x22
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9a a3       	std	Y+34, r25	; 0x22
    2786:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	89 a1       	ldd	r24, Y+33	; 0x21
    278a:	9a a1       	ldd	r25, Y+34	; 0x22
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <LCD_displayCharacter+0x1ac>
    2790:	14 c0       	rjmp	.+40     	; 0x27ba <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	6b a1       	ldd	r22, Y+35	; 0x23
    2794:	7c a1       	ldd	r23, Y+36	; 0x24
    2796:	8d a1       	ldd	r24, Y+37	; 0x25
    2798:	9e a1       	ldd	r25, Y+38	; 0x26
    279a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9a a3       	std	Y+34, r25	; 0x22
    27a4:	89 a3       	std	Y+33, r24	; 0x21
    27a6:	89 a1       	ldd	r24, Y+33	; 0x21
    27a8:	9a a1       	ldd	r25, Y+34	; 0x22
    27aa:	9e 8f       	std	Y+30, r25	; 0x1e
    27ac:	8d 8f       	std	Y+29, r24	; 0x1d
    27ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_displayCharacter+0x1f4>
    27b6:	9e 8f       	std	Y+30, r25	; 0x1e
    27b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	69 ad       	ldd	r22, Y+57	; 0x39
    27be:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <GPIO_writePort>
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a0 e8       	ldi	r26, 0x80	; 128
    27c8:	bf e3       	ldi	r27, 0x3F	; 63
    27ca:	89 8f       	std	Y+25, r24	; 0x19
    27cc:	9a 8f       	std	Y+26, r25	; 0x1a
    27ce:	ab 8f       	std	Y+27, r26	; 0x1b
    27d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	69 8d       	ldd	r22, Y+25	; 0x19
    27d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4a ef       	ldi	r20, 0xFA	; 250
    27e0:	54 e4       	ldi	r21, 0x44	; 68
    27e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	8d 8b       	std	Y+21, r24	; 0x15
    27ec:	9e 8b       	std	Y+22, r25	; 0x16
    27ee:	af 8b       	std	Y+23, r26	; 0x17
    27f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27f2:	6d 89       	ldd	r22, Y+21	; 0x15
    27f4:	7e 89       	ldd	r23, Y+22	; 0x16
    27f6:	8f 89       	ldd	r24, Y+23	; 0x17
    27f8:	98 8d       	ldd	r25, Y+24	; 0x18
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	2c f4       	brge	.+10     	; 0x2814 <LCD_displayCharacter+0x256>
		__ticks = 1;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9c 8b       	std	Y+20, r25	; 0x14
    2810:	8b 8b       	std	Y+19, r24	; 0x13
    2812:	3f c0       	rjmp	.+126    	; 0x2892 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2814:	6d 89       	ldd	r22, Y+21	; 0x15
    2816:	7e 89       	ldd	r23, Y+22	; 0x16
    2818:	8f 89       	ldd	r24, Y+23	; 0x17
    281a:	98 8d       	ldd	r25, Y+24	; 0x18
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	3f ef       	ldi	r19, 0xFF	; 255
    2820:	4f e7       	ldi	r20, 0x7F	; 127
    2822:	57 e4       	ldi	r21, 0x47	; 71
    2824:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2828:	18 16       	cp	r1, r24
    282a:	4c f5       	brge	.+82     	; 0x287e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282c:	69 8d       	ldd	r22, Y+25	; 0x19
    282e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2830:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2832:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e2       	ldi	r20, 0x20	; 32
    283a:	51 e4       	ldi	r21, 0x41	; 65
    283c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	9c 8b       	std	Y+20, r25	; 0x14
    2852:	8b 8b       	std	Y+19, r24	; 0x13
    2854:	0f c0       	rjmp	.+30     	; 0x2874 <LCD_displayCharacter+0x2b6>
    2856:	88 ec       	ldi	r24, 0xC8	; 200
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9a 8b       	std	Y+18, r25	; 0x12
    285c:	89 8b       	std	Y+17, r24	; 0x11
    285e:	89 89       	ldd	r24, Y+17	; 0x11
    2860:	9a 89       	ldd	r25, Y+18	; 0x12
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <LCD_displayCharacter+0x2a4>
    2866:	9a 8b       	std	Y+18, r25	; 0x12
    2868:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286a:	8b 89       	ldd	r24, Y+19	; 0x13
    286c:	9c 89       	ldd	r25, Y+20	; 0x14
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	9c 8b       	std	Y+20, r25	; 0x14
    2872:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2874:	8b 89       	ldd	r24, Y+19	; 0x13
    2876:	9c 89       	ldd	r25, Y+20	; 0x14
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	69 f7       	brne	.-38     	; 0x2856 <LCD_displayCharacter+0x298>
    287c:	14 c0       	rjmp	.+40     	; 0x28a6 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287e:	6d 89       	ldd	r22, Y+21	; 0x15
    2880:	7e 89       	ldd	r23, Y+22	; 0x16
    2882:	8f 89       	ldd	r24, Y+23	; 0x17
    2884:	98 8d       	ldd	r25, Y+24	; 0x18
    2886:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9c 8b       	std	Y+20, r25	; 0x14
    2890:	8b 8b       	std	Y+19, r24	; 0x13
    2892:	8b 89       	ldd	r24, Y+19	; 0x13
    2894:	9c 89       	ldd	r25, Y+20	; 0x14
    2896:	98 8b       	std	Y+16, r25	; 0x10
    2898:	8f 87       	std	Y+15, r24	; 0x0f
    289a:	8f 85       	ldd	r24, Y+15	; 0x0f
    289c:	98 89       	ldd	r25, Y+16	; 0x10
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <LCD_displayCharacter+0x2e0>
    28a2:	98 8b       	std	Y+16, r25	; 0x10
    28a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	66 e0       	ldi	r22, 0x06	; 6
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_writePin>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	a0 e8       	ldi	r26, 0x80	; 128
    28b6:	bf e3       	ldi	r27, 0x3F	; 63
    28b8:	8b 87       	std	Y+11, r24	; 0x0b
    28ba:	9c 87       	std	Y+12, r25	; 0x0c
    28bc:	ad 87       	std	Y+13, r26	; 0x0d
    28be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4a ef       	ldi	r20, 0xFA	; 250
    28ce:	54 e4       	ldi	r21, 0x44	; 68
    28d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	8f 83       	std	Y+7, r24	; 0x07
    28da:	98 87       	std	Y+8, r25	; 0x08
    28dc:	a9 87       	std	Y+9, r26	; 0x09
    28de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e8       	ldi	r20, 0x80	; 128
    28ee:	5f e3       	ldi	r21, 0x3F	; 63
    28f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28f4:	88 23       	and	r24, r24
    28f6:	2c f4       	brge	.+10     	; 0x2902 <LCD_displayCharacter+0x344>
		__ticks = 1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9e 83       	std	Y+6, r25	; 0x06
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	3f c0       	rjmp	.+126    	; 0x2980 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2902:	6f 81       	ldd	r22, Y+7	; 0x07
    2904:	78 85       	ldd	r23, Y+8	; 0x08
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	3f ef       	ldi	r19, 0xFF	; 255
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	57 e4       	ldi	r21, 0x47	; 71
    2912:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2916:	18 16       	cp	r1, r24
    2918:	4c f5       	brge	.+82     	; 0x296c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291a:	6b 85       	ldd	r22, Y+11	; 0x0b
    291c:	7c 85       	ldd	r23, Y+12	; 0x0c
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
    2942:	0f c0       	rjmp	.+30     	; 0x2962 <LCD_displayCharacter+0x3a4>
    2944:	88 ec       	ldi	r24, 0xC8	; 200
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9c 83       	std	Y+4, r25	; 0x04
    294a:	8b 83       	std	Y+3, r24	; 0x03
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <LCD_displayCharacter+0x392>
    2954:	9c 83       	std	Y+4, r25	; 0x04
    2956:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	9e 83       	std	Y+6, r25	; 0x06
    2960:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	8d 81       	ldd	r24, Y+5	; 0x05
    2964:	9e 81       	ldd	r25, Y+6	; 0x06
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	69 f7       	brne	.-38     	; 0x2944 <LCD_displayCharacter+0x386>
    296a:	14 c0       	rjmp	.+40     	; 0x2994 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <LCD_displayCharacter+0x3ce>
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2994:	e9 96       	adiw	r28, 0x39	; 57
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <LCD_displayString+0x6>
    29ac:	0f 92       	push	r0
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	9b 83       	std	Y+3, r25	; 0x03
    29b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29b6:	19 82       	std	Y+1, r1	; 0x01
    29b8:	0e c0       	rjmp	.+28     	; 0x29d6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	fc 01       	movw	r30, r24
    29c6:	e2 0f       	add	r30, r18
    29c8:	f3 1f       	adc	r31, r19
    29ca:	80 81       	ld	r24, Z
    29cc:	0e 94 df 12 	call	0x25be	; 0x25be <LCD_displayCharacter>
		i++;
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	8f 5f       	subi	r24, 0xFF	; 255
    29d4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	9b 81       	ldd	r25, Y+3	; 0x03
    29e0:	fc 01       	movw	r30, r24
    29e2:	e2 0f       	add	r30, r18
    29e4:	f3 1f       	adc	r31, r19
    29e6:	80 81       	ld	r24, Z
    29e8:	88 23       	and	r24, r24
    29ea:	39 f7       	brne	.-50     	; 0x29ba <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <LCD_moveCursor+0x6>
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <LCD_moveCursor+0x8>
    2a00:	0f 92       	push	r0
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	8a 83       	std	Y+2, r24	; 0x02
    2a08:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	3d 83       	std	Y+5, r19	; 0x05
    2a12:	2c 83       	std	Y+4, r18	; 0x04
    2a14:	8c 81       	ldd	r24, Y+4	; 0x04
    2a16:	9d 81       	ldd	r25, Y+5	; 0x05
    2a18:	81 30       	cpi	r24, 0x01	; 1
    2a1a:	91 05       	cpc	r25, r1
    2a1c:	c1 f0       	breq	.+48     	; 0x2a4e <LCD_moveCursor+0x56>
    2a1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a20:	3d 81       	ldd	r19, Y+5	; 0x05
    2a22:	22 30       	cpi	r18, 0x02	; 2
    2a24:	31 05       	cpc	r19, r1
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <LCD_moveCursor+0x3a>
    2a28:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	61 f0       	breq	.+24     	; 0x2a48 <LCD_moveCursor+0x50>
    2a30:	19 c0       	rjmp	.+50     	; 0x2a64 <LCD_moveCursor+0x6c>
    2a32:	2c 81       	ldd	r18, Y+4	; 0x04
    2a34:	3d 81       	ldd	r19, Y+5	; 0x05
    2a36:	22 30       	cpi	r18, 0x02	; 2
    2a38:	31 05       	cpc	r19, r1
    2a3a:	69 f0       	breq	.+26     	; 0x2a56 <LCD_moveCursor+0x5e>
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a40:	83 30       	cpi	r24, 0x03	; 3
    2a42:	91 05       	cpc	r25, r1
    2a44:	61 f0       	breq	.+24     	; 0x2a5e <LCD_moveCursor+0x66>
    2a46:	0e c0       	rjmp	.+28     	; 0x2a64 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	0b c0       	rjmp	.+22     	; 0x2a64 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	80 5c       	subi	r24, 0xC0	; 192
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	07 c0       	rjmp	.+14     	; 0x2a64 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	80 5f       	subi	r24, 0xF0	; 240
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	80 5b       	subi	r24, 0xB0	; 176
    2a62:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	80 68       	ori	r24, 0x80	; 128
    2a68:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_sendCommand>
}
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <LCD_displayStringRowColumn+0x6>
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <LCD_displayStringRowColumn+0x8>
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	6a 83       	std	Y+2, r22	; 0x02
    2a8c:	5c 83       	std	Y+4, r21	; 0x04
    2a8e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	6a 81       	ldd	r22, Y+2	; 0x02
    2a94:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	62 97       	sbiw	r28, 0x12	; 18
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	9a 8b       	std	Y+18, r25	; 0x12
    2ac4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ac6:	89 89       	ldd	r24, Y+17	; 0x11
    2ac8:	9a 89       	ldd	r25, Y+18	; 0x12
    2aca:	9e 01       	movw	r18, r28
    2acc:	2f 5f       	subi	r18, 0xFF	; 255
    2ace:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad0:	b9 01       	movw	r22, r18
    2ad2:	4a e0       	ldi	r20, 0x0A	; 10
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <itoa>
   LCD_displayString(buff); /* Display the string */
    2ada:	ce 01       	movw	r24, r28
    2adc:	01 96       	adiw	r24, 0x01	; 1
    2ade:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <LCD_displayString>
}
    2ae2:	62 96       	adiw	r28, 0x12	; 18
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_sendCommand>
}
    2b02:	cf 91       	pop	r28
    2b04:	df 91       	pop	r29
    2b06:	08 95       	ret

00002b08 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2b08:	df 93       	push	r29
    2b0a:	cf 93       	push	r28
    2b0c:	00 d0       	rcall	.+0      	; 0x2b0e <UART_init+0x6>
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <UART_init+0x8>
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	9c 83       	std	Y+4, r25	; 0x04
    2b16:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2b18:	1a 82       	std	Y+2, r1	; 0x02
    2b1a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b1c:	eb e2       	ldi	r30, 0x2B	; 43
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2b24:	ea e2       	ldi	r30, 0x2A	; 42
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	88 e1       	ldi	r24, 0x18	; 24
    2b2a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (UCSRC&0xFC)|(Config_Ptr->char_size);
    2b2c:	a0 e4       	ldi	r26, 0x40	; 64
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	e0 e4       	ldi	r30, 0x40	; 64
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	8c 77       	andi	r24, 0x7C	; 124
    2b38:	98 2f       	mov	r25, r24
    2b3a:	90 68       	ori	r25, 0x80	; 128
    2b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b40:	80 81       	ld	r24, Z
    2b42:	89 2b       	or	r24, r25
    2b44:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2b46:	eb 81       	ldd	r30, Y+3	; 0x03
    2b48:	fc 81       	ldd	r31, Y+4	; 0x04
    2b4a:	83 81       	ldd	r24, Z+3	; 0x03
    2b4c:	94 81       	ldd	r25, Z+4	; 0x04
    2b4e:	a5 81       	ldd	r26, Z+5	; 0x05
    2b50:	b6 81       	ldd	r27, Z+6	; 0x06
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	aa 1f       	adc	r26, r26
    2b58:	bb 1f       	adc	r27, r27
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	aa 1f       	adc	r26, r26
    2b60:	bb 1f       	adc	r27, r27
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	aa 1f       	adc	r26, r26
    2b68:	bb 1f       	adc	r27, r27
    2b6a:	9c 01       	movw	r18, r24
    2b6c:	ad 01       	movw	r20, r26
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	92 e1       	ldi	r25, 0x12	; 18
    2b72:	aa e7       	ldi	r26, 0x7A	; 122
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	bc 01       	movw	r22, r24
    2b78:	cd 01       	movw	r24, r26
    2b7a:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__udivmodsi4>
    2b7e:	da 01       	movw	r26, r20
    2b80:	c9 01       	movw	r24, r18
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	9a 83       	std	Y+2, r25	; 0x02
    2b86:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b88:	e0 e4       	ldi	r30, 0x40	; 64
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b90:	89 2f       	mov	r24, r25
    2b92:	99 27       	eor	r25, r25
    2b94:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b96:	e9 e2       	ldi	r30, 0x29	; 41
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	80 83       	st	Z, r24
}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	0f 92       	push	r0
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bb8:	eb e2       	ldi	r30, 0x2B	; 43
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	80 72       	andi	r24, 0x20	; 32
    2bc4:	90 70       	andi	r25, 0x00	; 0
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	b9 f3       	breq	.-18     	; 0x2bb8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2bca:	ec e2       	ldi	r30, 0x2C	; 44
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2bd2:	0f 90       	pop	r0
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2be2:	eb e2       	ldi	r30, 0x2B	; 43
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	88 23       	and	r24, r24
    2bea:	dc f7       	brge	.-10     	; 0x2be2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2bec:	ec e2       	ldi	r30, 0x2C	; 44
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
}
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <UART_sendString+0x6>
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	9a 83       	std	Y+2, r25	; 0x02
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	0a c0       	rjmp	.+20     	; 0x2c1c <UART_sendString+0x24>
	/************************* Another Method *************************/
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    2c08:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0c:	80 81       	ld	r24, Z
    2c0e:	0e 94 d6 15 	call	0x2bac	; 0x2bac <UART_sendByte>
		Str++;
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	9a 81       	ldd	r25, Y+2	; 0x02
    2c16:	01 96       	adiw	r24, 0x01	; 1
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	/************************* Another Method *************************/
	while(*Str != '\0')
    2c1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c20:	80 81       	ld	r24, Z
    2c22:	88 23       	and	r24, r24
    2c24:	89 f7       	brne	.-30     	; 0x2c08 <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	/*******************************************************************/
}
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <UART_receiveString+0xa>
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <UART_receiveString+0xc>
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	9c 83       	std	Y+4, r25	; 0x04
    2c42:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i = 0;
    2c44:	1a 82       	std	Y+2, r1	; 0x02
    2c46:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c48:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	89 01       	movw	r16, r18
    2c52:	08 0f       	add	r16, r24
    2c54:	19 1f       	adc	r17, r25
    2c56:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	80 83       	st	Z, r24
    2c5e:	10 c0       	rjmp	.+32     	; 0x2c80 <UART_receiveString+0x50>
	/* Receive the string*/
	while (Str[i] != '#') {
		i++;
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	9a 81       	ldd	r25, Y+2	; 0x02
    2c64:	01 96       	adiw	r24, 0x01	; 1
    2c66:	9a 83       	std	Y+2, r25	; 0x02
    2c68:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c6c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	9a 81       	ldd	r25, Y+2	; 0x02
    2c72:	89 01       	movw	r16, r18
    2c74:	08 0f       	add	r16, r24
    2c76:	19 1f       	adc	r17, r25
    2c78:	0e 94 ed 15 	call	0x2bda	; 0x2bda <UART_recieveByte>
    2c7c:	f8 01       	movw	r30, r16
    2c7e:	80 83       	st	Z, r24
{
	uint16 i = 0;
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
	/* Receive the string*/
	while (Str[i] != '#') {
    2c80:	2b 81       	ldd	r18, Y+3	; 0x03
    2c82:	3c 81       	ldd	r19, Y+4	; 0x04
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	f9 01       	movw	r30, r18
    2c8a:	e8 0f       	add	r30, r24
    2c8c:	f9 1f       	adc	r31, r25
    2c8e:	80 81       	ld	r24, Z
    2c90:	83 32       	cpi	r24, 0x23	; 35
    2c92:	31 f7       	brne	.-52     	; 0x2c60 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	9c 81       	ldd	r25, Y+4	; 0x04
    2c98:	29 81       	ldd	r18, Y+1	; 0x01
    2c9a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	e2 0f       	add	r30, r18
    2ca0:	f3 1f       	adc	r31, r19
    2ca2:	10 82       	st	Z, r1
}
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	08 95       	ret

00002cb6 <__udivmodsi4>:
    2cb6:	a1 e2       	ldi	r26, 0x21	; 33
    2cb8:	1a 2e       	mov	r1, r26
    2cba:	aa 1b       	sub	r26, r26
    2cbc:	bb 1b       	sub	r27, r27
    2cbe:	fd 01       	movw	r30, r26
    2cc0:	0d c0       	rjmp	.+26     	; 0x2cdc <__udivmodsi4_ep>

00002cc2 <__udivmodsi4_loop>:
    2cc2:	aa 1f       	adc	r26, r26
    2cc4:	bb 1f       	adc	r27, r27
    2cc6:	ee 1f       	adc	r30, r30
    2cc8:	ff 1f       	adc	r31, r31
    2cca:	a2 17       	cp	r26, r18
    2ccc:	b3 07       	cpc	r27, r19
    2cce:	e4 07       	cpc	r30, r20
    2cd0:	f5 07       	cpc	r31, r21
    2cd2:	20 f0       	brcs	.+8      	; 0x2cdc <__udivmodsi4_ep>
    2cd4:	a2 1b       	sub	r26, r18
    2cd6:	b3 0b       	sbc	r27, r19
    2cd8:	e4 0b       	sbc	r30, r20
    2cda:	f5 0b       	sbc	r31, r21

00002cdc <__udivmodsi4_ep>:
    2cdc:	66 1f       	adc	r22, r22
    2cde:	77 1f       	adc	r23, r23
    2ce0:	88 1f       	adc	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	1a 94       	dec	r1
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <__udivmodsi4_loop>
    2ce8:	60 95       	com	r22
    2cea:	70 95       	com	r23
    2cec:	80 95       	com	r24
    2cee:	90 95       	com	r25
    2cf0:	9b 01       	movw	r18, r22
    2cf2:	ac 01       	movw	r20, r24
    2cf4:	bd 01       	movw	r22, r26
    2cf6:	cf 01       	movw	r24, r30
    2cf8:	08 95       	ret

00002cfa <__prologue_saves__>:
    2cfa:	2f 92       	push	r2
    2cfc:	3f 92       	push	r3
    2cfe:	4f 92       	push	r4
    2d00:	5f 92       	push	r5
    2d02:	6f 92       	push	r6
    2d04:	7f 92       	push	r7
    2d06:	8f 92       	push	r8
    2d08:	9f 92       	push	r9
    2d0a:	af 92       	push	r10
    2d0c:	bf 92       	push	r11
    2d0e:	cf 92       	push	r12
    2d10:	df 92       	push	r13
    2d12:	ef 92       	push	r14
    2d14:	ff 92       	push	r15
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	ca 1b       	sub	r28, r26
    2d24:	db 0b       	sbc	r29, r27
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	09 94       	ijmp

00002d32 <__epilogue_restores__>:
    2d32:	2a 88       	ldd	r2, Y+18	; 0x12
    2d34:	39 88       	ldd	r3, Y+17	; 0x11
    2d36:	48 88       	ldd	r4, Y+16	; 0x10
    2d38:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d40:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d42:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d44:	b9 84       	ldd	r11, Y+9	; 0x09
    2d46:	c8 84       	ldd	r12, Y+8	; 0x08
    2d48:	df 80       	ldd	r13, Y+7	; 0x07
    2d4a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d4c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d4e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d50:	1b 81       	ldd	r17, Y+3	; 0x03
    2d52:	aa 81       	ldd	r26, Y+2	; 0x02
    2d54:	b9 81       	ldd	r27, Y+1	; 0x01
    2d56:	ce 0f       	add	r28, r30
    2d58:	d1 1d       	adc	r29, r1
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	ed 01       	movw	r28, r26
    2d66:	08 95       	ret

00002d68 <strcmp>:
    2d68:	fb 01       	movw	r30, r22
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	8d 91       	ld	r24, X+
    2d6e:	01 90       	ld	r0, Z+
    2d70:	80 19       	sub	r24, r0
    2d72:	01 10       	cpse	r0, r1
    2d74:	d9 f3       	breq	.-10     	; 0x2d6c <strcmp+0x4>
    2d76:	99 0b       	sbc	r25, r25
    2d78:	08 95       	ret

00002d7a <strcpy>:
    2d7a:	fb 01       	movw	r30, r22
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	01 90       	ld	r0, Z+
    2d80:	0d 92       	st	X+, r0
    2d82:	00 20       	and	r0, r0
    2d84:	e1 f7       	brne	.-8      	; 0x2d7e <strcpy+0x4>
    2d86:	08 95       	ret

00002d88 <itoa>:
    2d88:	fb 01       	movw	r30, r22
    2d8a:	9f 01       	movw	r18, r30
    2d8c:	e8 94       	clt
    2d8e:	42 30       	cpi	r20, 0x02	; 2
    2d90:	c4 f0       	brlt	.+48     	; 0x2dc2 <itoa+0x3a>
    2d92:	45 32       	cpi	r20, 0x25	; 37
    2d94:	b4 f4       	brge	.+44     	; 0x2dc2 <itoa+0x3a>
    2d96:	4a 30       	cpi	r20, 0x0A	; 10
    2d98:	29 f4       	brne	.+10     	; 0x2da4 <itoa+0x1c>
    2d9a:	97 fb       	bst	r25, 7
    2d9c:	1e f4       	brtc	.+6      	; 0x2da4 <itoa+0x1c>
    2d9e:	90 95       	com	r25
    2da0:	81 95       	neg	r24
    2da2:	9f 4f       	sbci	r25, 0xFF	; 255
    2da4:	64 2f       	mov	r22, r20
    2da6:	77 27       	eor	r23, r23
    2da8:	0e 94 f5 16 	call	0x2dea	; 0x2dea <__udivmodhi4>
    2dac:	80 5d       	subi	r24, 0xD0	; 208
    2dae:	8a 33       	cpi	r24, 0x3A	; 58
    2db0:	0c f0       	brlt	.+2      	; 0x2db4 <itoa+0x2c>
    2db2:	89 5d       	subi	r24, 0xD9	; 217
    2db4:	81 93       	st	Z+, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	a1 f7       	brne	.-24     	; 0x2da4 <itoa+0x1c>
    2dbc:	16 f4       	brtc	.+4      	; 0x2dc2 <itoa+0x3a>
    2dbe:	5d e2       	ldi	r21, 0x2D	; 45
    2dc0:	51 93       	st	Z+, r21
    2dc2:	10 82       	st	Z, r1
    2dc4:	c9 01       	movw	r24, r18
    2dc6:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <strrev>

00002dca <strrev>:
    2dca:	dc 01       	movw	r26, r24
    2dcc:	fc 01       	movw	r30, r24
    2dce:	67 2f       	mov	r22, r23
    2dd0:	71 91       	ld	r23, Z+
    2dd2:	77 23       	and	r23, r23
    2dd4:	e1 f7       	brne	.-8      	; 0x2dce <strrev+0x4>
    2dd6:	32 97       	sbiw	r30, 0x02	; 2
    2dd8:	04 c0       	rjmp	.+8      	; 0x2de2 <strrev+0x18>
    2dda:	7c 91       	ld	r23, X
    2ddc:	6d 93       	st	X+, r22
    2dde:	70 83       	st	Z, r23
    2de0:	62 91       	ld	r22, -Z
    2de2:	ae 17       	cp	r26, r30
    2de4:	bf 07       	cpc	r27, r31
    2de6:	c8 f3       	brcs	.-14     	; 0x2dda <strrev+0x10>
    2de8:	08 95       	ret

00002dea <__udivmodhi4>:
    2dea:	aa 1b       	sub	r26, r26
    2dec:	bb 1b       	sub	r27, r27
    2dee:	51 e1       	ldi	r21, 0x11	; 17
    2df0:	07 c0       	rjmp	.+14     	; 0x2e00 <__udivmodhi4_ep>

00002df2 <__udivmodhi4_loop>:
    2df2:	aa 1f       	adc	r26, r26
    2df4:	bb 1f       	adc	r27, r27
    2df6:	a6 17       	cp	r26, r22
    2df8:	b7 07       	cpc	r27, r23
    2dfa:	10 f0       	brcs	.+4      	; 0x2e00 <__udivmodhi4_ep>
    2dfc:	a6 1b       	sub	r26, r22
    2dfe:	b7 0b       	sbc	r27, r23

00002e00 <__udivmodhi4_ep>:
    2e00:	88 1f       	adc	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	5a 95       	dec	r21
    2e06:	a9 f7       	brne	.-22     	; 0x2df2 <__udivmodhi4_loop>
    2e08:	80 95       	com	r24
    2e0a:	90 95       	com	r25
    2e0c:	bc 01       	movw	r22, r24
    2e0e:	cd 01       	movw	r24, r26
    2e10:	08 95       	ret

00002e12 <_exit>:
    2e12:	f8 94       	cli

00002e14 <__stop_program>:
    2e14:	ff cf       	rjmp	.-2      	; 0x2e14 <__stop_program>
