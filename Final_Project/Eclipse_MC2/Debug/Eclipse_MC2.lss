
Eclipse_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00001f90  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800078  00800078  0000203c  2**0
                  ALLOC
  3 .stab         0000219c  00000000  00000000  0000203c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000127b  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005453  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005593  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000734c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008237  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009144  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000093d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 05 	call	0xb8e	; 0xb8e <main>
      8a:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
/*
 * Description :
 * Initialize the Buzzer
 */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*BUZZER*/
	GPIO_setupPinDirection(PORTC_ID, PIN6_ID, PIN_OUTPUT); /* All PORTD pins are o/p pins */
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Buzzer_on>:
/*
 * Description :
 * Turn on the buzzer
 */
void Buzzer_on(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN6_ID,1);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	66 e0       	ldi	r22, 0x06	; 6
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_off>:
/*
 * Description :
 * Turn off the buzzer
 */
void Buzzer_off(void)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN6_ID,0);
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	66 e0       	ldi	r22, 0x06	; 6
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <main>:
#define motor_stop 98
#define motor_finish 99
uint8 g_seconds;

int main(void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	c8 56       	subi	r28, 0x68	; 104
     b98:	d0 40       	sbci	r29, 0x00	; 0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
     ba4:	1a ae       	std	Y+58, r1	; 0x3a
	uint8 a_rec;
	uint8 a_readByte=0;
     ba6:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 a_pass[7];
	uint8 a_passCheck[7];

	/* Initialize the UART driver */
	UART_ConfigType uart_config = { _8Bit, Disabled, _1bit, 9600 };
     ba8:	ce 01       	movw	r24, r28
     baa:	86 5b       	subi	r24, 0xB6	; 182
     bac:	9f 4f       	sbci	r25, 0xFF	; 255
     bae:	6c 96       	adiw	r28, 0x1c	; 28
     bb0:	9f af       	std	Y+63, r25	; 0x3f
     bb2:	8e af       	std	Y+62, r24	; 0x3e
     bb4:	6c 97       	sbiw	r28, 0x1c	; 28
     bb6:	81 e7       	ldi	r24, 0x71	; 113
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	6e 96       	adiw	r28, 0x1e	; 30
     bbc:	9f af       	std	Y+63, r25	; 0x3f
     bbe:	8e af       	std	Y+62, r24	; 0x3e
     bc0:	6e 97       	sbiw	r28, 0x1e	; 30
     bc2:	97 e0       	ldi	r25, 0x07	; 7
     bc4:	6f 96       	adiw	r28, 0x1f	; 31
     bc6:	9f af       	std	Y+63, r25	; 0x3f
     bc8:	6f 97       	sbiw	r28, 0x1f	; 31
     bca:	6e 96       	adiw	r28, 0x1e	; 30
     bcc:	ee ad       	ldd	r30, Y+62	; 0x3e
     bce:	ff ad       	ldd	r31, Y+63	; 0x3f
     bd0:	6e 97       	sbiw	r28, 0x1e	; 30
     bd2:	00 80       	ld	r0, Z
     bd4:	6e 96       	adiw	r28, 0x1e	; 30
     bd6:	8e ad       	ldd	r24, Y+62	; 0x3e
     bd8:	9f ad       	ldd	r25, Y+63	; 0x3f
     bda:	6e 97       	sbiw	r28, 0x1e	; 30
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	6e 96       	adiw	r28, 0x1e	; 30
     be0:	9f af       	std	Y+63, r25	; 0x3f
     be2:	8e af       	std	Y+62, r24	; 0x3e
     be4:	6e 97       	sbiw	r28, 0x1e	; 30
     be6:	6c 96       	adiw	r28, 0x1c	; 28
     be8:	ee ad       	ldd	r30, Y+62	; 0x3e
     bea:	ff ad       	ldd	r31, Y+63	; 0x3f
     bec:	6c 97       	sbiw	r28, 0x1c	; 28
     bee:	00 82       	st	Z, r0
     bf0:	6c 96       	adiw	r28, 0x1c	; 28
     bf2:	8e ad       	ldd	r24, Y+62	; 0x3e
     bf4:	9f ad       	ldd	r25, Y+63	; 0x3f
     bf6:	6c 97       	sbiw	r28, 0x1c	; 28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	6c 96       	adiw	r28, 0x1c	; 28
     bfc:	9f af       	std	Y+63, r25	; 0x3f
     bfe:	8e af       	std	Y+62, r24	; 0x3e
     c00:	6c 97       	sbiw	r28, 0x1c	; 28
     c02:	6f 96       	adiw	r28, 0x1f	; 31
     c04:	9f ad       	ldd	r25, Y+63	; 0x3f
     c06:	6f 97       	sbiw	r28, 0x1f	; 31
     c08:	91 50       	subi	r25, 0x01	; 1
     c0a:	6f 96       	adiw	r28, 0x1f	; 31
     c0c:	9f af       	std	Y+63, r25	; 0x3f
     c0e:	6f 97       	sbiw	r28, 0x1f	; 31
     c10:	6f 96       	adiw	r28, 0x1f	; 31
     c12:	ef ad       	ldd	r30, Y+63	; 0x3f
     c14:	6f 97       	sbiw	r28, 0x1f	; 31
     c16:	ee 23       	and	r30, r30
     c18:	c1 f6       	brne	.-80     	; 0xbca <main+0x3c>
	UART_init(&uart_config);
     c1a:	ce 01       	movw	r24, r28
     c1c:	86 5b       	subi	r24, 0xB6	; 182
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <UART_init>
	/* Initialize the I2C driver */
	TWI_ConfigType twi_config = { 0x01, T_CPU_1 };
     c24:	ce 01       	movw	r24, r28
     c26:	8f 5a       	subi	r24, 0xAF	; 175
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	a1 96       	adiw	r28, 0x21	; 33
     c2c:	9f af       	std	Y+63, r25	; 0x3f
     c2e:	8e af       	std	Y+62, r24	; 0x3e
     c30:	a1 97       	sbiw	r28, 0x21	; 33
     c32:	8e e6       	ldi	r24, 0x6E	; 110
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	a3 96       	adiw	r28, 0x23	; 35
     c38:	9f af       	std	Y+63, r25	; 0x3f
     c3a:	8e af       	std	Y+62, r24	; 0x3e
     c3c:	a3 97       	sbiw	r28, 0x23	; 35
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	a4 96       	adiw	r28, 0x24	; 36
     c42:	9f af       	std	Y+63, r25	; 0x3f
     c44:	a4 97       	sbiw	r28, 0x24	; 36
     c46:	a3 96       	adiw	r28, 0x23	; 35
     c48:	ee ad       	ldd	r30, Y+62	; 0x3e
     c4a:	ff ad       	ldd	r31, Y+63	; 0x3f
     c4c:	a3 97       	sbiw	r28, 0x23	; 35
     c4e:	00 80       	ld	r0, Z
     c50:	a3 96       	adiw	r28, 0x23	; 35
     c52:	8e ad       	ldd	r24, Y+62	; 0x3e
     c54:	9f ad       	ldd	r25, Y+63	; 0x3f
     c56:	a3 97       	sbiw	r28, 0x23	; 35
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	a3 96       	adiw	r28, 0x23	; 35
     c5c:	9f af       	std	Y+63, r25	; 0x3f
     c5e:	8e af       	std	Y+62, r24	; 0x3e
     c60:	a3 97       	sbiw	r28, 0x23	; 35
     c62:	a1 96       	adiw	r28, 0x21	; 33
     c64:	ee ad       	ldd	r30, Y+62	; 0x3e
     c66:	ff ad       	ldd	r31, Y+63	; 0x3f
     c68:	a1 97       	sbiw	r28, 0x21	; 33
     c6a:	00 82       	st	Z, r0
     c6c:	a1 96       	adiw	r28, 0x21	; 33
     c6e:	8e ad       	ldd	r24, Y+62	; 0x3e
     c70:	9f ad       	ldd	r25, Y+63	; 0x3f
     c72:	a1 97       	sbiw	r28, 0x21	; 33
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	a1 96       	adiw	r28, 0x21	; 33
     c78:	9f af       	std	Y+63, r25	; 0x3f
     c7a:	8e af       	std	Y+62, r24	; 0x3e
     c7c:	a1 97       	sbiw	r28, 0x21	; 33
     c7e:	a4 96       	adiw	r28, 0x24	; 36
     c80:	9f ad       	ldd	r25, Y+63	; 0x3f
     c82:	a4 97       	sbiw	r28, 0x24	; 36
     c84:	91 50       	subi	r25, 0x01	; 1
     c86:	a4 96       	adiw	r28, 0x24	; 36
     c88:	9f af       	std	Y+63, r25	; 0x3f
     c8a:	a4 97       	sbiw	r28, 0x24	; 36
     c8c:	a4 96       	adiw	r28, 0x24	; 36
     c8e:	ef ad       	ldd	r30, Y+63	; 0x3f
     c90:	a4 97       	sbiw	r28, 0x24	; 36
     c92:	ee 23       	and	r30, r30
     c94:	c1 f6       	brne	.-80     	; 0xc46 <main+0xb8>
	TWI_init(&twi_config);
     c96:	ce 01       	movw	r24, r28
     c98:	8f 5a       	subi	r24, 0xAF	; 175
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <TWI_init>
	/* Initialize Timer Configurations */
	Timer0_ConfigType timer_config = { normal,0, 255,F_CPU_256 };
     ca0:	ce 01       	movw	r24, r28
     ca2:	8c 5a       	subi	r24, 0xAC	; 172
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	a6 96       	adiw	r28, 0x26	; 38
     ca8:	9f af       	std	Y+63, r25	; 0x3f
     caa:	8e af       	std	Y+62, r24	; 0x3e
     cac:	a6 97       	sbiw	r28, 0x26	; 38
     cae:	88 e6       	ldi	r24, 0x68	; 104
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a8 96       	adiw	r28, 0x28	; 40
     cb4:	9f af       	std	Y+63, r25	; 0x3f
     cb6:	8e af       	std	Y+62, r24	; 0x3e
     cb8:	a8 97       	sbiw	r28, 0x28	; 40
     cba:	96 e0       	ldi	r25, 0x06	; 6
     cbc:	a9 96       	adiw	r28, 0x29	; 41
     cbe:	9f af       	std	Y+63, r25	; 0x3f
     cc0:	a9 97       	sbiw	r28, 0x29	; 41
     cc2:	a8 96       	adiw	r28, 0x28	; 40
     cc4:	ee ad       	ldd	r30, Y+62	; 0x3e
     cc6:	ff ad       	ldd	r31, Y+63	; 0x3f
     cc8:	a8 97       	sbiw	r28, 0x28	; 40
     cca:	00 80       	ld	r0, Z
     ccc:	a8 96       	adiw	r28, 0x28	; 40
     cce:	8e ad       	ldd	r24, Y+62	; 0x3e
     cd0:	9f ad       	ldd	r25, Y+63	; 0x3f
     cd2:	a8 97       	sbiw	r28, 0x28	; 40
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	a8 96       	adiw	r28, 0x28	; 40
     cd8:	9f af       	std	Y+63, r25	; 0x3f
     cda:	8e af       	std	Y+62, r24	; 0x3e
     cdc:	a8 97       	sbiw	r28, 0x28	; 40
     cde:	a6 96       	adiw	r28, 0x26	; 38
     ce0:	ee ad       	ldd	r30, Y+62	; 0x3e
     ce2:	ff ad       	ldd	r31, Y+63	; 0x3f
     ce4:	a6 97       	sbiw	r28, 0x26	; 38
     ce6:	00 82       	st	Z, r0
     ce8:	a6 96       	adiw	r28, 0x26	; 38
     cea:	8e ad       	ldd	r24, Y+62	; 0x3e
     cec:	9f ad       	ldd	r25, Y+63	; 0x3f
     cee:	a6 97       	sbiw	r28, 0x26	; 38
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	a6 96       	adiw	r28, 0x26	; 38
     cf4:	9f af       	std	Y+63, r25	; 0x3f
     cf6:	8e af       	std	Y+62, r24	; 0x3e
     cf8:	a6 97       	sbiw	r28, 0x26	; 38
     cfa:	a9 96       	adiw	r28, 0x29	; 41
     cfc:	9f ad       	ldd	r25, Y+63	; 0x3f
     cfe:	a9 97       	sbiw	r28, 0x29	; 41
     d00:	91 50       	subi	r25, 0x01	; 1
     d02:	a9 96       	adiw	r28, 0x29	; 41
     d04:	9f af       	std	Y+63, r25	; 0x3f
     d06:	a9 97       	sbiw	r28, 0x29	; 41
     d08:	a9 96       	adiw	r28, 0x29	; 41
     d0a:	ef ad       	ldd	r30, Y+63	; 0x3f
     d0c:	a9 97       	sbiw	r28, 0x29	; 41
     d0e:	ee 23       	and	r30, r30
     d10:	c1 f6       	brne	.-80     	; 0xcc2 <main+0x134>
	/* Initialize the Dc Motor driver */
	DcMotor_Init();
     d12:	0e 94 3c 09 	call	0x1278	; 0x1278 <DcMotor_Init>
	/* Initialize the Buzzer driver */
	Buzzer_init();
     d16:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	/*Enable global interrupts in MC.*/
	SREG  |= (1<<7);
     d1a:	af e5       	ldi	r26, 0x5F	; 95
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ef e5       	ldi	r30, 0x5F	; 95
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	8c 93       	st	X, r24
	while(1)
    {
		a_rec=UART_recieveByte();
     d28:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <UART_recieveByte>
     d2c:	89 af       	std	Y+57, r24	; 0x39
		if(a_rec==add_pass)//check request state
     d2e:	89 ad       	ldd	r24, Y+57	; 0x39
     d30:	87 33       	cpi	r24, 0x37	; 55
     d32:	09 f0       	breq	.+2      	; 0xd36 <main+0x1a8>
     d34:	20 c1       	rjmp	.+576    	; 0xf76 <main+0x3e8>
		{
			UART_receiveString(a_passCheck);
     d36:	ce 01       	movw	r24, r28
     d38:	8d 5b       	subi	r24, 0xBD	; 189
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <UART_receiveString>
			i=0;
     d40:	1a ae       	std	Y+58, r1	; 0x3a
     d42:	95 c0       	rjmp	.+298    	; 0xe6e <main+0x2e0>
			while(a_passCheck[i] != '\0')
			{
				if(a_passCheck[i]>=0 && a_passCheck[i]<=9)
     d44:	8a ad       	ldd	r24, Y+58	; 0x3a
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	ce 01       	movw	r24, r28
     d4c:	8d 5b       	subi	r24, 0xBD	; 189
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	fc 01       	movw	r30, r24
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	80 81       	ld	r24, Z
     d58:	8a 30       	cpi	r24, 0x0A	; 10
     d5a:	a0 f4       	brcc	.+40     	; 0xd84 <main+0x1f6>
				{
					EEPROM_writeByte(0x0311 + i, a_passCheck[i]);
     d5c:	8a ad       	ldd	r24, Y+58	; 0x3a
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	8f 5e       	subi	r24, 0xEF	; 239
     d64:	9c 4f       	sbci	r25, 0xFC	; 252
     d66:	ac 01       	movw	r20, r24
     d68:	8a ad       	ldd	r24, Y+58	; 0x3a
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	ce 01       	movw	r24, r28
     d70:	8d 5b       	subi	r24, 0xBD	; 189
     d72:	9f 4f       	sbci	r25, 0xFF	; 255
     d74:	fc 01       	movw	r30, r24
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	20 81       	ld	r18, Z
     d7c:	ca 01       	movw	r24, r20
     d7e:	62 2f       	mov	r22, r18
     d80:	0e 94 8a 09 	call	0x1314	; 0x1314 <EEPROM_writeByte>
				}
				i++;
     d84:	8a ad       	ldd	r24, Y+58	; 0x3a
     d86:	8f 5f       	subi	r24, 0xFF	; 255
     d88:	8a af       	std	Y+58, r24	; 0x3a
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a0 ea       	ldi	r26, 0xA0	; 160
     d90:	b1 e4       	ldi	r27, 0x41	; 65
     d92:	8d ab       	std	Y+53, r24	; 0x35
     d94:	9e ab       	std	Y+54, r25	; 0x36
     d96:	af ab       	std	Y+55, r26	; 0x37
     d98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9a:	6d a9       	ldd	r22, Y+53	; 0x35
     d9c:	7e a9       	ldd	r23, Y+54	; 0x36
     d9e:	8f a9       	ldd	r24, Y+55	; 0x37
     da0:	98 ad       	ldd	r25, Y+56	; 0x38
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4a ef       	ldi	r20, 0xFA	; 250
     da8:	54 e4       	ldi	r21, 0x44	; 68
     daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	89 ab       	std	Y+49, r24	; 0x31
     db4:	9a ab       	std	Y+50, r25	; 0x32
     db6:	ab ab       	std	Y+51, r26	; 0x33
     db8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dba:	69 a9       	ldd	r22, Y+49	; 0x31
     dbc:	7a a9       	ldd	r23, Y+50	; 0x32
     dbe:	8b a9       	ldd	r24, Y+51	; 0x33
     dc0:	9c a9       	ldd	r25, Y+52	; 0x34
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dce:	88 23       	and	r24, r24
     dd0:	2c f4       	brge	.+10     	; 0xddc <main+0x24e>
		__ticks = 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	98 ab       	std	Y+48, r25	; 0x30
     dd8:	8f a7       	std	Y+47, r24	; 0x2f
     dda:	3f c0       	rjmp	.+126    	; 0xe5a <main+0x2cc>
	else if (__tmp > 65535)
     ddc:	69 a9       	ldd	r22, Y+49	; 0x31
     dde:	7a a9       	ldd	r23, Y+50	; 0x32
     de0:	8b a9       	ldd	r24, Y+51	; 0x33
     de2:	9c a9       	ldd	r25, Y+52	; 0x34
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	3f ef       	ldi	r19, 0xFF	; 255
     de8:	4f e7       	ldi	r20, 0x7F	; 127
     dea:	57 e4       	ldi	r21, 0x47	; 71
     dec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df0:	18 16       	cp	r1, r24
     df2:	4c f5       	brge	.+82     	; 0xe46 <main+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df4:	6d a9       	ldd	r22, Y+53	; 0x35
     df6:	7e a9       	ldd	r23, Y+54	; 0x36
     df8:	8f a9       	ldd	r24, Y+55	; 0x37
     dfa:	98 ad       	ldd	r25, Y+56	; 0x38
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e2       	ldi	r20, 0x20	; 32
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	98 ab       	std	Y+48, r25	; 0x30
     e1a:	8f a7       	std	Y+47, r24	; 0x2f
     e1c:	0f c0       	rjmp	.+30     	; 0xe3c <main+0x2ae>
     e1e:	88 ec       	ldi	r24, 0xC8	; 200
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9e a7       	std	Y+46, r25	; 0x2e
     e24:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e26:	8d a5       	ldd	r24, Y+45	; 0x2d
     e28:	9e a5       	ldd	r25, Y+46	; 0x2e
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <main+0x29c>
     e2e:	9e a7       	std	Y+46, r25	; 0x2e
     e30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e32:	8f a5       	ldd	r24, Y+47	; 0x2f
     e34:	98 a9       	ldd	r25, Y+48	; 0x30
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	98 ab       	std	Y+48, r25	; 0x30
     e3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e3e:	98 a9       	ldd	r25, Y+48	; 0x30
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	69 f7       	brne	.-38     	; 0xe1e <main+0x290>
     e44:	14 c0       	rjmp	.+40     	; 0xe6e <main+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e46:	69 a9       	ldd	r22, Y+49	; 0x31
     e48:	7a a9       	ldd	r23, Y+50	; 0x32
     e4a:	8b a9       	ldd	r24, Y+51	; 0x33
     e4c:	9c a9       	ldd	r25, Y+52	; 0x34
     e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	98 ab       	std	Y+48, r25	; 0x30
     e58:	8f a7       	std	Y+47, r24	; 0x2f
     e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5c:	98 a9       	ldd	r25, Y+48	; 0x30
     e5e:	9c a7       	std	Y+44, r25	; 0x2c
     e60:	8b a7       	std	Y+43, r24	; 0x2b
     e62:	8b a5       	ldd	r24, Y+43	; 0x2b
     e64:	9c a5       	ldd	r25, Y+44	; 0x2c
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <main+0x2d8>
     e6a:	9c a7       	std	Y+44, r25	; 0x2c
     e6c:	8b a7       	std	Y+43, r24	; 0x2b
		a_rec=UART_recieveByte();
		if(a_rec==add_pass)//check request state
		{
			UART_receiveString(a_passCheck);
			i=0;
			while(a_passCheck[i] != '\0')
     e6e:	8a ad       	ldd	r24, Y+58	; 0x3a
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	ce 01       	movw	r24, r28
     e76:	8d 5b       	subi	r24, 0xBD	; 189
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	fc 01       	movw	r30, r24
     e7c:	e2 0f       	add	r30, r18
     e7e:	f3 1f       	adc	r31, r19
     e80:	80 81       	ld	r24, Z
     e82:	88 23       	and	r24, r24
     e84:	09 f0       	breq	.+2      	; 0xe88 <main+0x2fa>
     e86:	5e cf       	rjmp	.-324    	; 0xd44 <main+0x1b6>
					EEPROM_writeByte(0x0311 + i, a_passCheck[i]);
				}
				i++;
				_delay_ms(20);
			}
				UART_sendByte(rec_pass);//66=success
     e88:	82 e4       	ldi	r24, 0x42	; 66
     e8a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <UART_sendByte>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	a0 ea       	ldi	r26, 0xA0	; 160
     e94:	b1 e4       	ldi	r27, 0x41	; 65
     e96:	8f a3       	std	Y+39, r24	; 0x27
     e98:	98 a7       	std	Y+40, r25	; 0x28
     e9a:	a9 a7       	std	Y+41, r26	; 0x29
     e9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9e:	6f a1       	ldd	r22, Y+39	; 0x27
     ea0:	78 a5       	ldd	r23, Y+40	; 0x28
     ea2:	89 a5       	ldd	r24, Y+41	; 0x29
     ea4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	4a ef       	ldi	r20, 0xFA	; 250
     eac:	54 e4       	ldi	r21, 0x44	; 68
     eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	8b a3       	std	Y+35, r24	; 0x23
     eb8:	9c a3       	std	Y+36, r25	; 0x24
     eba:	ad a3       	std	Y+37, r26	; 0x25
     ebc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ebe:	6b a1       	ldd	r22, Y+35	; 0x23
     ec0:	7c a1       	ldd	r23, Y+36	; 0x24
     ec2:	8d a1       	ldd	r24, Y+37	; 0x25
     ec4:	9e a1       	ldd	r25, Y+38	; 0x26
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e8       	ldi	r20, 0x80	; 128
     ecc:	5f e3       	ldi	r21, 0x3F	; 63
     ece:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed2:	88 23       	and	r24, r24
     ed4:	2c f4       	brge	.+10     	; 0xee0 <main+0x352>
		__ticks = 1;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9a a3       	std	Y+34, r25	; 0x22
     edc:	89 a3       	std	Y+33, r24	; 0x21
     ede:	3f c0       	rjmp	.+126    	; 0xf5e <main+0x3d0>
	else if (__tmp > 65535)
     ee0:	6b a1       	ldd	r22, Y+35	; 0x23
     ee2:	7c a1       	ldd	r23, Y+36	; 0x24
     ee4:	8d a1       	ldd	r24, Y+37	; 0x25
     ee6:	9e a1       	ldd	r25, Y+38	; 0x26
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	3f ef       	ldi	r19, 0xFF	; 255
     eec:	4f e7       	ldi	r20, 0x7F	; 127
     eee:	57 e4       	ldi	r21, 0x47	; 71
     ef0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef4:	18 16       	cp	r1, r24
     ef6:	4c f5       	brge	.+82     	; 0xf4a <main+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef8:	6f a1       	ldd	r22, Y+39	; 0x27
     efa:	78 a5       	ldd	r23, Y+40	; 0x28
     efc:	89 a5       	ldd	r24, Y+41	; 0x29
     efe:	9a a5       	ldd	r25, Y+42	; 0x2a
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e2       	ldi	r20, 0x20	; 32
     f06:	51 e4       	ldi	r21, 0x41	; 65
     f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	9a a3       	std	Y+34, r25	; 0x22
     f1e:	89 a3       	std	Y+33, r24	; 0x21
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <main+0x3b2>
     f22:	88 ec       	ldi	r24, 0xC8	; 200
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	98 a3       	std	Y+32, r25	; 0x20
     f28:	8f 8f       	std	Y+31, r24	; 0x1f
     f2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f2c:	98 a1       	ldd	r25, Y+32	; 0x20
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <main+0x3a0>
     f32:	98 a3       	std	Y+32, r25	; 0x20
     f34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f36:	89 a1       	ldd	r24, Y+33	; 0x21
     f38:	9a a1       	ldd	r25, Y+34	; 0x22
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	9a a3       	std	Y+34, r25	; 0x22
     f3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f40:	89 a1       	ldd	r24, Y+33	; 0x21
     f42:	9a a1       	ldd	r25, Y+34	; 0x22
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	69 f7       	brne	.-38     	; 0xf22 <main+0x394>
     f48:	14 c0       	rjmp	.+40     	; 0xf72 <main+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4a:	6b a1       	ldd	r22, Y+35	; 0x23
     f4c:	7c a1       	ldd	r23, Y+36	; 0x24
     f4e:	8d a1       	ldd	r24, Y+37	; 0x25
     f50:	9e a1       	ldd	r25, Y+38	; 0x26
     f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	9a a3       	std	Y+34, r25	; 0x22
     f5c:	89 a3       	std	Y+33, r24	; 0x21
     f5e:	89 a1       	ldd	r24, Y+33	; 0x21
     f60:	9a a1       	ldd	r25, Y+34	; 0x22
     f62:	9e 8f       	std	Y+30, r25	; 0x1e
     f64:	8d 8f       	std	Y+29, r24	; 0x1d
     f66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f68:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <main+0x3dc>
     f6e:	9e 8f       	std	Y+30, r25	; 0x1e
     f70:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(20);
				a_rec=0;
     f72:	19 ae       	std	Y+57, r1	; 0x39
     f74:	d9 ce       	rjmp	.-590    	; 0xd28 <main+0x19a>
		}
		else if(a_rec==get_pass)//Retrieve pass
     f76:	89 ad       	ldd	r24, Y+57	; 0x39
     f78:	8d 34       	cpi	r24, 0x4D	; 77
     f7a:	09 f0       	breq	.+2      	; 0xf7e <main+0x3f0>
     f7c:	1e c1       	rjmp	.+572    	; 0x11ba <main+0x62c>
		{
			i = 0;
     f7e:	1a ae       	std	Y+58, r1	; 0x3a
     f80:	8d c0       	rjmp	.+282    	; 0x109c <main+0x50e>
			while (a_passCheck[i] != '\0')
			{
				EEPROM_readByte(0x0311 + i, &a_readByte);
     f82:	8a ad       	ldd	r24, Y+58	; 0x3a
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	8f 5e       	subi	r24, 0xEF	; 239
     f8a:	9c 4f       	sbci	r25, 0xFC	; 252
     f8c:	9e 01       	movw	r18, r28
     f8e:	25 5c       	subi	r18, 0xC5	; 197
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	b9 01       	movw	r22, r18
     f94:	0e 94 cb 09 	call	0x1396	; 0x1396 <EEPROM_readByte>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 ea       	ldi	r26, 0xA0	; 160
     f9e:	b1 e4       	ldi	r27, 0x41	; 65
     fa0:	89 8f       	std	Y+25, r24	; 0x19
     fa2:	9a 8f       	std	Y+26, r25	; 0x1a
     fa4:	ab 8f       	std	Y+27, r26	; 0x1b
     fa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa8:	69 8d       	ldd	r22, Y+25	; 0x19
     faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	4a ef       	ldi	r20, 0xFA	; 250
     fb6:	54 e4       	ldi	r21, 0x44	; 68
     fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	8d 8b       	std	Y+21, r24	; 0x15
     fc2:	9e 8b       	std	Y+22, r25	; 0x16
     fc4:	af 8b       	std	Y+23, r26	; 0x17
     fc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fc8:	6d 89       	ldd	r22, Y+21	; 0x15
     fca:	7e 89       	ldd	r23, Y+22	; 0x16
     fcc:	8f 89       	ldd	r24, Y+23	; 0x17
     fce:	98 8d       	ldd	r25, Y+24	; 0x18
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e8       	ldi	r20, 0x80	; 128
     fd6:	5f e3       	ldi	r21, 0x3F	; 63
     fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fdc:	88 23       	and	r24, r24
     fde:	2c f4       	brge	.+10     	; 0xfea <main+0x45c>
		__ticks = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9c 8b       	std	Y+20, r25	; 0x14
     fe6:	8b 8b       	std	Y+19, r24	; 0x13
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <main+0x4da>
	else if (__tmp > 65535)
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	3f ef       	ldi	r19, 0xFF	; 255
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	57 e4       	ldi	r21, 0x47	; 71
     ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ffe:	18 16       	cp	r1, r24
    1000:	4c f5       	brge	.+82     	; 0x1054 <main+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1002:	69 8d       	ldd	r22, Y+25	; 0x19
    1004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e2       	ldi	r20, 0x20	; 32
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	9c 8b       	std	Y+20, r25	; 0x14
    1028:	8b 8b       	std	Y+19, r24	; 0x13
    102a:	0f c0       	rjmp	.+30     	; 0x104a <main+0x4bc>
    102c:	88 ec       	ldi	r24, 0xC8	; 200
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9a 8b       	std	Y+18, r25	; 0x12
    1032:	89 8b       	std	Y+17, r24	; 0x11
    1034:	89 89       	ldd	r24, Y+17	; 0x11
    1036:	9a 89       	ldd	r25, Y+18	; 0x12
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <main+0x4aa>
    103c:	9a 8b       	std	Y+18, r25	; 0x12
    103e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1040:	8b 89       	ldd	r24, Y+19	; 0x13
    1042:	9c 89       	ldd	r25, Y+20	; 0x14
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	9c 8b       	std	Y+20, r25	; 0x14
    1048:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104a:	8b 89       	ldd	r24, Y+19	; 0x13
    104c:	9c 89       	ldd	r25, Y+20	; 0x14
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	69 f7       	brne	.-38     	; 0x102c <main+0x49e>
    1052:	14 c0       	rjmp	.+40     	; 0x107c <main+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1054:	6d 89       	ldd	r22, Y+21	; 0x15
    1056:	7e 89       	ldd	r23, Y+22	; 0x16
    1058:	8f 89       	ldd	r24, Y+23	; 0x17
    105a:	98 8d       	ldd	r25, Y+24	; 0x18
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9c 8b       	std	Y+20, r25	; 0x14
    1066:	8b 8b       	std	Y+19, r24	; 0x13
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	98 8b       	std	Y+16, r25	; 0x10
    106e:	8f 87       	std	Y+15, r24	; 0x0f
    1070:	8f 85       	ldd	r24, Y+15	; 0x0f
    1072:	98 89       	ldd	r25, Y+16	; 0x10
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <main+0x4e6>
    1078:	98 8b       	std	Y+16, r25	; 0x10
    107a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				if (a_readByte >= 0 && a_readByte <= 9) {
    107c:	8b ad       	ldd	r24, Y+59	; 0x3b
    107e:	8a 30       	cpi	r24, 0x0A	; 10
    1080:	50 f4       	brcc	.+20     	; 0x1096 <main+0x508>
					a_pass[i] = a_readByte;
    1082:	8a ad       	ldd	r24, Y+58	; 0x3a
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	4b ad       	ldd	r20, Y+59	; 0x3b
    108a:	ce 01       	movw	r24, r28
    108c:	cc 96       	adiw	r24, 0x3c	; 60
    108e:	fc 01       	movw	r30, r24
    1090:	e2 0f       	add	r30, r18
    1092:	f3 1f       	adc	r31, r19
    1094:	40 83       	st	Z, r20
				}
				i++;
    1096:	8a ad       	ldd	r24, Y+58	; 0x3a
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	8a af       	std	Y+58, r24	; 0x3a
				a_rec=0;
		}
		else if(a_rec==get_pass)//Retrieve pass
		{
			i = 0;
			while (a_passCheck[i] != '\0')
    109c:	8a ad       	ldd	r24, Y+58	; 0x3a
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	ce 01       	movw	r24, r28
    10a4:	8d 5b       	subi	r24, 0xBD	; 189
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	fc 01       	movw	r30, r24
    10aa:	e2 0f       	add	r30, r18
    10ac:	f3 1f       	adc	r31, r19
    10ae:	80 81       	ld	r24, Z
    10b0:	88 23       	and	r24, r24
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <main+0x528>
    10b4:	66 cf       	rjmp	.-308    	; 0xf82 <main+0x3f4>
				if (a_readByte >= 0 && a_readByte <= 9) {
					a_pass[i] = a_readByte;
				}
				i++;
			}
			a_pass[i]='#';
    10b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	ce 01       	movw	r24, r28
    10be:	cc 96       	adiw	r24, 0x3c	; 60
    10c0:	fc 01       	movw	r30, r24
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	83 e2       	ldi	r24, 0x23	; 35
    10c8:	80 83       	st	Z, r24
			UART_sendString(a_pass);
    10ca:	ce 01       	movw	r24, r28
    10cc:	cc 96       	adiw	r24, 0x3c	; 60
    10ce:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <UART_sendString>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a0 ea       	ldi	r26, 0xA0	; 160
    10d8:	b1 e4       	ldi	r27, 0x41	; 65
    10da:	8b 87       	std	Y+11, r24	; 0x0b
    10dc:	9c 87       	std	Y+12, r25	; 0x0c
    10de:	ad 87       	std	Y+13, r26	; 0x0d
    10e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	4a ef       	ldi	r20, 0xFA	; 250
    10f0:	54 e4       	ldi	r21, 0x44	; 68
    10f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	8f 83       	std	Y+7, r24	; 0x07
    10fc:	98 87       	std	Y+8, r25	; 0x08
    10fe:	a9 87       	std	Y+9, r26	; 0x09
    1100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1102:	6f 81       	ldd	r22, Y+7	; 0x07
    1104:	78 85       	ldd	r23, Y+8	; 0x08
    1106:	89 85       	ldd	r24, Y+9	; 0x09
    1108:	9a 85       	ldd	r25, Y+10	; 0x0a
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1116:	88 23       	and	r24, r24
    1118:	2c f4       	brge	.+10     	; 0x1124 <main+0x596>
		__ticks = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	3f c0       	rjmp	.+126    	; 0x11a2 <main+0x614>
	else if (__tmp > 65535)
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	3f ef       	ldi	r19, 0xFF	; 255
    1130:	4f e7       	ldi	r20, 0x7F	; 127
    1132:	57 e4       	ldi	r21, 0x47	; 71
    1134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1138:	18 16       	cp	r1, r24
    113a:	4c f5       	brge	.+82     	; 0x118e <main+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113c:	6b 85       	ldd	r22, Y+11	; 0x0b
    113e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1140:	8d 85       	ldd	r24, Y+13	; 0x0d
    1142:	9e 85       	ldd	r25, Y+14	; 0x0e
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e2       	ldi	r20, 0x20	; 32
    114a:	51 e4       	ldi	r21, 0x41	; 65
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <main+0x5f6>
    1166:	88 ec       	ldi	r24, 0xC8	; 200
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	9c 83       	std	Y+4, r25	; 0x04
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <main+0x5e4>
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	69 f7       	brne	.-38     	; 0x1166 <main+0x5d8>
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <main+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <main+0x620>
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			a_rec=0;
    11b6:	19 ae       	std	Y+57, r1	; 0x39
    11b8:	b7 cd       	rjmp	.-1170   	; 0xd28 <main+0x19a>
		}
		else if(a_rec==trigger_buzzer)
    11ba:	89 ad       	ldd	r24, Y+57	; 0x39
    11bc:	88 35       	cpi	r24, 0x58	; 88
    11be:	c9 f4       	brne	.+50     	; 0x11f2 <main+0x664>
		{
			g_seconds=0;
    11c0:	10 92 7c 00 	sts	0x007C, r1
			Buzzer_on();
    11c4:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_on>
			Timer0_setCallBack(Timer0_deInit);
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	9e e0       	ldi	r25, 0x0E	; 14
    11cc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Timer0_setCallBack>
			Timer0_Init(&timer_config);
    11d0:	ce 01       	movw	r24, r28
    11d2:	8c 5a       	subi	r24, 0xAC	; 172
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <Timer0_Init>
			while(g_seconds!=60){}
    11da:	80 91 7c 00 	lds	r24, 0x007C
    11de:	8c 33       	cpi	r24, 0x3C	; 60
    11e0:	e1 f7       	brne	.-8      	; 0x11da <main+0x64c>
			g_seconds=0;
    11e2:	10 92 7c 00 	sts	0x007C, r1
			Buzzer_off();
    11e6:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_off>
			UART_sendByte(stop_buzzer);
    11ea:	89 e5       	ldi	r24, 0x59	; 89
    11ec:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <UART_sendByte>
    11f0:	9b cd       	rjmp	.-1226   	; 0xd28 <main+0x19a>
		}
		else if (a_rec == motor_start) {
    11f2:	89 ad       	ldd	r24, Y+57	; 0x39
    11f4:	8f 35       	cpi	r24, 0x5F	; 95
    11f6:	09 f0       	breq	.+2      	; 0x11fa <main+0x66c>
    11f8:	97 cd       	rjmp	.-1234   	; 0xd28 <main+0x19a>
			Timer0_setCallBack(Timer0_deInit);
    11fa:	84 e0       	ldi	r24, 0x04	; 4
    11fc:	9e e0       	ldi	r25, 0x0E	; 14
    11fe:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Timer0_setCallBack>
			DcMotor_Rotate(DC_MOTOR_CW);//unlocking
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	0e 94 57 09 	call	0x12ae	; 0x12ae <DcMotor_Rotate>
			UART_sendByte(motor_cw);
    1208:	80 e6       	ldi	r24, 0x60	; 96
    120a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <UART_sendByte>
			Timer0_Init(&timer_config);
    120e:	ce 01       	movw	r24, r28
    1210:	8c 5a       	subi	r24, 0xAC	; 172
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <Timer0_Init>
			while (g_seconds != 15) {}
    1218:	80 91 7c 00 	lds	r24, 0x007C
    121c:	8f 30       	cpi	r24, 0x0F	; 15
    121e:	e1 f7       	brne	.-8      	; 0x1218 <main+0x68a>
			g_seconds = 0;
    1220:	10 92 7c 00 	sts	0x007C, r1

			DcMotor_Rotate(DC_MOTOR_STOP);//hold
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	0e 94 57 09 	call	0x12ae	; 0x12ae <DcMotor_Rotate>
			UART_sendByte(motor_stop);
    122a:	82 e6       	ldi	r24, 0x62	; 98
    122c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <UART_sendByte>
			Timer0_Init(&timer_config);
    1230:	ce 01       	movw	r24, r28
    1232:	8c 5a       	subi	r24, 0xAC	; 172
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <Timer0_Init>
			while (g_seconds != 3) {}
    123a:	80 91 7c 00 	lds	r24, 0x007C
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	e1 f7       	brne	.-8      	; 0x123a <main+0x6ac>
			g_seconds = 0;
    1242:	10 92 7c 00 	sts	0x007C, r1

			DcMotor_Rotate(DC_MOTOR_ACW);//locking
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	0e 94 57 09 	call	0x12ae	; 0x12ae <DcMotor_Rotate>
			UART_sendByte(motor_acw);
    124c:	81 e6       	ldi	r24, 0x61	; 97
    124e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <UART_sendByte>
			Timer0_Init(&timer_config);
    1252:	ce 01       	movw	r24, r28
    1254:	8c 5a       	subi	r24, 0xAC	; 172
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <Timer0_Init>
			while (g_seconds != 15) {}
    125c:	80 91 7c 00 	lds	r24, 0x007C
    1260:	8f 30       	cpi	r24, 0x0F	; 15
    1262:	e1 f7       	brne	.-8      	; 0x125c <main+0x6ce>
			g_seconds = 0;
    1264:	10 92 7c 00 	sts	0x007C, r1

			DcMotor_Rotate(DC_MOTOR_STOP);
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	0e 94 57 09 	call	0x12ae	; 0x12ae <DcMotor_Rotate>
			UART_sendByte(motor_finish);//finish
    126e:	83 e6       	ldi	r24, 0x63	; 99
    1270:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <UART_sendByte>
			a_rec=0;
    1274:	19 ae       	std	Y+57, r1	; 0x39
    1276:	58 cd       	rjmp	.-1360   	; 0xd28 <main+0x19a>

00001278 <DcMotor_Init>:
 * Initialize the DC Motor by:
 * 1. Setup the direction of the two motor pins as output by send the request to GPIO driver.
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	41 e0       	ldi	r20, 0x01	; 1
    1286:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	0e 94 2b 0a 	call	0x1456	; 0x1456 <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <DcMotor_Rotate>:
 * Description :
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	0f 92       	push	r0
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	89 83       	std	Y+1, r24	; 0x01
	if(state == DC_MOTOR_CW)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	59 f4       	brne	.+22     	; 0x12d6 <DcMotor_Rotate+0x28>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
    12d4:	1b c0       	rjmp	.+54     	; 0x130c <DcMotor_Rotate+0x5e>
	}
	else if(state == DC_MOTOR_ACW)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	59 f4       	brne	.+22     	; 0x12f2 <DcMotor_Rotate+0x44>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
    12f0:	0d c0       	rjmp	.+26     	; 0x130c <DcMotor_Rotate+0x5e>
	}
	else if(state == DC_MOTOR_STOP)
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	88 23       	and	r24, r24
    12f6:	51 f4       	brne	.+20     	; 0x130c <DcMotor_Rotate+0x5e>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	0e 94 16 0b 	call	0x162c	; 0x162c <GPIO_writePin>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <EEPROM_writeByte+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <EEPROM_writeByte+0x8>
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1326:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    132a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    132e:	88 30       	cpi	r24, 0x08	; 8
    1330:	11 f0       	breq	.+4      	; 0x1336 <EEPROM_writeByte+0x22>
        return ERROR;
    1332:	1c 82       	std	Y+4, r1	; 0x04
    1334:	28 c0       	rjmp	.+80     	; 0x1386 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	80 70       	andi	r24, 0x00	; 0
    133c:	97 70       	andi	r25, 0x07	; 7
    133e:	88 0f       	add	r24, r24
    1340:	89 2f       	mov	r24, r25
    1342:	88 1f       	adc	r24, r24
    1344:	99 0b       	sbc	r25, r25
    1346:	91 95       	neg	r25
    1348:	80 6a       	ori	r24, 0xA0	; 160
    134a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    134e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    1352:	88 31       	cpi	r24, 0x18	; 24
    1354:	11 f0       	breq	.+4      	; 0x135a <EEPROM_writeByte+0x46>
        return ERROR; 
    1356:	1c 82       	std	Y+4, r1	; 0x04
    1358:	16 c0       	rjmp	.+44     	; 0x1386 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1360:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    1364:	88 32       	cpi	r24, 0x28	; 40
    1366:	11 f0       	breq	.+4      	; 0x136c <EEPROM_writeByte+0x58>
        return ERROR;
    1368:	1c 82       	std	Y+4, r1	; 0x04
    136a:	0d c0       	rjmp	.+26     	; 0x1386 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1372:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    1376:	88 32       	cpi	r24, 0x28	; 40
    1378:	11 f0       	breq	.+4      	; 0x137e <EEPROM_writeByte+0x6a>
        return ERROR;
    137a:	1c 82       	std	Y+4, r1	; 0x04
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    137e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <TWI_stop>
	
    return SUCCESS;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	8c 83       	std	Y+4, r24	; 0x04
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <EEPROM_readByte+0x6>
    139c:	00 d0       	rcall	.+0      	; 0x139e <EEPROM_readByte+0x8>
    139e:	0f 92       	push	r0
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	7c 83       	std	Y+4, r23	; 0x04
    13aa:	6b 83       	std	Y+3, r22	; 0x03

	/* Send the Start Bit */
    TWI_start();
    13ac:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    13b0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    13b4:	88 30       	cpi	r24, 0x08	; 8
    13b6:	11 f0       	breq	.+4      	; 0x13bc <EEPROM_readByte+0x26>
        return ERROR;
    13b8:	1d 82       	std	Y+5, r1	; 0x05
    13ba:	44 c0       	rjmp	.+136    	; 0x1444 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	80 70       	andi	r24, 0x00	; 0
    13c2:	97 70       	andi	r25, 0x07	; 7
    13c4:	88 0f       	add	r24, r24
    13c6:	89 2f       	mov	r24, r25
    13c8:	88 1f       	adc	r24, r24
    13ca:	99 0b       	sbc	r25, r25
    13cc:	91 95       	neg	r25
    13ce:	80 6a       	ori	r24, 0xA0	; 160
    13d0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13d4:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    13d8:	88 31       	cpi	r24, 0x18	; 24
    13da:	11 f0       	breq	.+4      	; 0x13e0 <EEPROM_readByte+0x4a>
        return ERROR;
    13dc:	1d 82       	std	Y+5, r1	; 0x05
    13de:	32 c0       	rjmp	.+100    	; 0x1444 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13e6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    13ea:	88 32       	cpi	r24, 0x28	; 40
    13ec:	11 f0       	breq	.+4      	; 0x13f2 <EEPROM_readByte+0x5c>
        return ERROR;
    13ee:	1d 82       	std	Y+5, r1	; 0x05
    13f0:	29 c0       	rjmp	.+82     	; 0x1444 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    13f2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    13f6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    13fa:	80 31       	cpi	r24, 0x10	; 16
    13fc:	11 f0       	breq	.+4      	; 0x1402 <EEPROM_readByte+0x6c>
        return ERROR;
    13fe:	1d 82       	std	Y+5, r1	; 0x05
    1400:	21 c0       	rjmp	.+66     	; 0x1444 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	80 70       	andi	r24, 0x00	; 0
    1408:	97 70       	andi	r25, 0x07	; 7
    140a:	88 0f       	add	r24, r24
    140c:	89 2f       	mov	r24, r25
    140e:	88 1f       	adc	r24, r24
    1410:	99 0b       	sbc	r25, r25
    1412:	91 95       	neg	r25
    1414:	81 6a       	ori	r24, 0xA1	; 161
    1416:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    141a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    141e:	80 34       	cpi	r24, 0x40	; 64
    1420:	11 f0       	breq	.+4      	; 0x1426 <EEPROM_readByte+0x90>
        return ERROR;
    1422:	1d 82       	std	Y+5, r1	; 0x05
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1426:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <TWI_readByteWithNACK>
    142a:	eb 81       	ldd	r30, Y+3	; 0x03
    142c:	fc 81       	ldd	r31, Y+4	; 0x04
    142e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1430:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <TWI_getStatus>
    1434:	88 35       	cpi	r24, 0x58	; 88
    1436:	11 f0       	breq	.+4      	; 0x143c <EEPROM_readByte+0xa6>
        return ERROR;
    1438:	1d 82       	std	Y+5, r1	; 0x05
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    143c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <TWI_stop>
    return SUCCESS;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	00 d0       	rcall	.+0      	; 0x145c <GPIO_setupPinDirection+0x6>
    145c:	00 d0       	rcall	.+0      	; 0x145e <GPIO_setupPinDirection+0x8>
    145e:	0f 92       	push	r0
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	6a 83       	std	Y+2, r22	; 0x02
    1468:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	88 30       	cpi	r24, 0x08	; 8
    146e:	08 f0       	brcs	.+2      	; 0x1472 <GPIO_setupPinDirection+0x1c>
    1470:	d5 c0       	rjmp	.+426    	; 0x161c <GPIO_setupPinDirection+0x1c6>
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	84 30       	cpi	r24, 0x04	; 4
    1476:	08 f0       	brcs	.+2      	; 0x147a <GPIO_setupPinDirection+0x24>
    1478:	d1 c0       	rjmp	.+418    	; 0x161c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3d 83       	std	Y+5, r19	; 0x05
    1482:	2c 83       	std	Y+4, r18	; 0x04
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	9d 81       	ldd	r25, Y+5	; 0x05
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	09 f4       	brne	.+2      	; 0x1490 <GPIO_setupPinDirection+0x3a>
    148e:	43 c0       	rjmp	.+134    	; 0x1516 <GPIO_setupPinDirection+0xc0>
    1490:	2c 81       	ldd	r18, Y+4	; 0x04
    1492:	3d 81       	ldd	r19, Y+5	; 0x05
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	2c f4       	brge	.+10     	; 0x14a4 <GPIO_setupPinDirection+0x4e>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	71 f0       	breq	.+28     	; 0x14be <GPIO_setupPinDirection+0x68>
    14a2:	bc c0       	rjmp	.+376    	; 0x161c <GPIO_setupPinDirection+0x1c6>
    14a4:	2c 81       	ldd	r18, Y+4	; 0x04
    14a6:	3d 81       	ldd	r19, Y+5	; 0x05
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <GPIO_setupPinDirection+0x5a>
    14ae:	5f c0       	rjmp	.+190    	; 0x156e <GPIO_setupPinDirection+0x118>
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	9d 81       	ldd	r25, Y+5	; 0x05
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <GPIO_setupPinDirection+0x66>
    14ba:	85 c0       	rjmp	.+266    	; 0x15c6 <GPIO_setupPinDirection+0x170>
    14bc:	af c0       	rjmp	.+350    	; 0x161c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	a1 f4       	brne	.+40     	; 0x14ec <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14c4:	aa e3       	ldi	r26, 0x3A	; 58
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ea e3       	ldi	r30, 0x3A	; 58
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <GPIO_setupPinDirection+0x8c>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <GPIO_setupPinDirection+0x88>
    14e6:	84 2b       	or	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	98 c0       	rjmp	.+304    	; 0x161c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14ec:	aa e3       	ldi	r26, 0x3A	; 58
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ea e3       	ldi	r30, 0x3A	; 58
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <GPIO_setupPinDirection+0xb4>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <GPIO_setupPinDirection+0xb0>
    150e:	80 95       	com	r24
    1510:	84 23       	and	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	83 c0       	rjmp	.+262    	; 0x161c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	a1 f4       	brne	.+40     	; 0x1544 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    151c:	a7 e3       	ldi	r26, 0x37	; 55
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e7 e3       	ldi	r30, 0x37	; 55
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <GPIO_setupPinDirection+0xe4>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <GPIO_setupPinDirection+0xe0>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	6c c0       	rjmp	.+216    	; 0x161c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1544:	a7 e3       	ldi	r26, 0x37	; 55
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e7 e3       	ldi	r30, 0x37	; 55
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <GPIO_setupPinDirection+0x10c>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <GPIO_setupPinDirection+0x108>
    1566:	80 95       	com	r24
    1568:	84 23       	and	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	57 c0       	rjmp	.+174    	; 0x161c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	a1 f4       	brne	.+40     	; 0x159c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1574:	a4 e3       	ldi	r26, 0x34	; 52
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e4 e3       	ldi	r30, 0x34	; 52
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_setupPinDirection+0x13c>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_setupPinDirection+0x138>
    1596:	84 2b       	or	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	40 c0       	rjmp	.+128    	; 0x161c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    159c:	a4 e3       	ldi	r26, 0x34	; 52
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e4 e3       	ldi	r30, 0x34	; 52
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_setupPinDirection+0x164>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <GPIO_setupPinDirection+0x160>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	2b c0       	rjmp	.+86     	; 0x161c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	a1 f4       	brne	.+40     	; 0x15f4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15cc:	a1 e3       	ldi	r26, 0x31	; 49
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e1 e3       	ldi	r30, 0x31	; 49
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <GPIO_setupPinDirection+0x194>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <GPIO_setupPinDirection+0x190>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15f4:	a1 e3       	ldi	r26, 0x31	; 49
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e1 e3       	ldi	r30, 0x31	; 49
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_setupPinDirection+0x1bc>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_setupPinDirection+0x1b8>
    1616:	80 95       	com	r24
    1618:	84 23       	and	r24, r20
    161a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <GPIO_writePin+0x6>
    1632:	00 d0       	rcall	.+0      	; 0x1634 <GPIO_writePin+0x8>
    1634:	0f 92       	push	r0
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	6a 83       	std	Y+2, r22	; 0x02
    163e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	88 30       	cpi	r24, 0x08	; 8
    1644:	08 f0       	brcs	.+2      	; 0x1648 <GPIO_writePin+0x1c>
    1646:	d5 c0       	rjmp	.+426    	; 0x17f2 <GPIO_writePin+0x1c6>
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	08 f0       	brcs	.+2      	; 0x1650 <GPIO_writePin+0x24>
    164e:	d1 c0       	rjmp	.+418    	; 0x17f2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3d 83       	std	Y+5, r19	; 0x05
    1658:	2c 83       	std	Y+4, r18	; 0x04
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <GPIO_writePin+0x3a>
    1664:	43 c0       	rjmp	.+134    	; 0x16ec <GPIO_writePin+0xc0>
    1666:	2c 81       	ldd	r18, Y+4	; 0x04
    1668:	3d 81       	ldd	r19, Y+5	; 0x05
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	2c f4       	brge	.+10     	; 0x167a <GPIO_writePin+0x4e>
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	71 f0       	breq	.+28     	; 0x1694 <GPIO_writePin+0x68>
    1678:	bc c0       	rjmp	.+376    	; 0x17f2 <GPIO_writePin+0x1c6>
    167a:	2c 81       	ldd	r18, Y+4	; 0x04
    167c:	3d 81       	ldd	r19, Y+5	; 0x05
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <GPIO_writePin+0x5a>
    1684:	5f c0       	rjmp	.+190    	; 0x1744 <GPIO_writePin+0x118>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	83 30       	cpi	r24, 0x03	; 3
    168c:	91 05       	cpc	r25, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <GPIO_writePin+0x66>
    1690:	85 c0       	rjmp	.+266    	; 0x179c <GPIO_writePin+0x170>
    1692:	af c0       	rjmp	.+350    	; 0x17f2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	a1 f4       	brne	.+40     	; 0x16c2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    169a:	ab e3       	ldi	r26, 0x3B	; 59
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e3       	ldi	r30, 0x3B	; 59
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <GPIO_writePin+0x8c>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <GPIO_writePin+0x88>
    16bc:	84 2b       	or	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	98 c0       	rjmp	.+304    	; 0x17f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16c2:	ab e3       	ldi	r26, 0x3B	; 59
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	eb e3       	ldi	r30, 0x3B	; 59
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <GPIO_writePin+0xb4>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <GPIO_writePin+0xb0>
    16e4:	80 95       	com	r24
    16e6:	84 23       	and	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	83 c0       	rjmp	.+262    	; 0x17f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	a1 f4       	brne	.+40     	; 0x171a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16f2:	a8 e3       	ldi	r26, 0x38	; 56
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e8 e3       	ldi	r30, 0x38	; 56
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <GPIO_writePin+0xe4>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <GPIO_writePin+0xe0>
    1714:	84 2b       	or	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	6c c0       	rjmp	.+216    	; 0x17f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    171a:	a8 e3       	ldi	r26, 0x38	; 56
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e8 e3       	ldi	r30, 0x38	; 56
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_writePin+0x10c>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_writePin+0x108>
    173c:	80 95       	com	r24
    173e:	84 23       	and	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	57 c0       	rjmp	.+174    	; 0x17f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	a1 f4       	brne	.+40     	; 0x1772 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    174a:	a5 e3       	ldi	r26, 0x35	; 53
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e5 e3       	ldi	r30, 0x35	; 53
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <GPIO_writePin+0x13c>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <GPIO_writePin+0x138>
    176c:	84 2b       	or	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	40 c0       	rjmp	.+128    	; 0x17f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1772:	a5 e3       	ldi	r26, 0x35	; 53
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e5 e3       	ldi	r30, 0x35	; 53
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <GPIO_writePin+0x164>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <GPIO_writePin+0x160>
    1794:	80 95       	com	r24
    1796:	84 23       	and	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	2b c0       	rjmp	.+86     	; 0x17f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	a1 f4       	brne	.+40     	; 0x17ca <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <GPIO_writePin+0x194>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <GPIO_writePin+0x190>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17ca:	a2 e3       	ldi	r26, 0x32	; 50
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e2 e3       	ldi	r30, 0x32	; 50
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_writePin+0x1bc>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_writePin+0x1b8>
    17ec:	80 95       	com	r24
    17ee:	84 23       	and	r24, r20
    17f0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <GPIO_readPin+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <GPIO_readPin+0x8>
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	8a 83       	std	Y+2, r24	; 0x02
    1812:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1814:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	88 30       	cpi	r24, 0x08	; 8
    181a:	08 f0       	brcs	.+2      	; 0x181e <GPIO_readPin+0x1c>
    181c:	84 c0       	rjmp	.+264    	; 0x1926 <GPIO_readPin+0x124>
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	08 f0       	brcs	.+2      	; 0x1826 <GPIO_readPin+0x24>
    1824:	80 c0       	rjmp	.+256    	; 0x1926 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3d 83       	std	Y+5, r19	; 0x05
    182e:	2c 83       	std	Y+4, r18	; 0x04
    1830:	4c 81       	ldd	r20, Y+4	; 0x04
    1832:	5d 81       	ldd	r21, Y+5	; 0x05
    1834:	41 30       	cpi	r20, 0x01	; 1
    1836:	51 05       	cpc	r21, r1
    1838:	79 f1       	breq	.+94     	; 0x1898 <GPIO_readPin+0x96>
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	91 05       	cpc	r25, r1
    1842:	34 f4       	brge	.+12     	; 0x1850 <GPIO_readPin+0x4e>
    1844:	2c 81       	ldd	r18, Y+4	; 0x04
    1846:	3d 81       	ldd	r19, Y+5	; 0x05
    1848:	21 15       	cp	r18, r1
    184a:	31 05       	cpc	r19, r1
    184c:	69 f0       	breq	.+26     	; 0x1868 <GPIO_readPin+0x66>
    184e:	6b c0       	rjmp	.+214    	; 0x1926 <GPIO_readPin+0x124>
    1850:	4c 81       	ldd	r20, Y+4	; 0x04
    1852:	5d 81       	ldd	r21, Y+5	; 0x05
    1854:	42 30       	cpi	r20, 0x02	; 2
    1856:	51 05       	cpc	r21, r1
    1858:	b9 f1       	breq	.+110    	; 0x18c8 <GPIO_readPin+0xc6>
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	9d 81       	ldd	r25, Y+5	; 0x05
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	91 05       	cpc	r25, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <GPIO_readPin+0x64>
    1864:	49 c0       	rjmp	.+146    	; 0x18f8 <GPIO_readPin+0xf6>
    1866:	5f c0       	rjmp	.+190    	; 0x1926 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1868:	e9 e3       	ldi	r30, 0x39	; 57
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a9 01       	movw	r20, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <GPIO_readPin+0x7e>
    187c:	55 95       	asr	r21
    187e:	47 95       	ror	r20
    1880:	8a 95       	dec	r24
    1882:	e2 f7       	brpl	.-8      	; 0x187c <GPIO_readPin+0x7a>
    1884:	ca 01       	movw	r24, r20
    1886:	81 70       	andi	r24, 0x01	; 1
    1888:	90 70       	andi	r25, 0x00	; 0
    188a:	88 23       	and	r24, r24
    188c:	19 f0       	breq	.+6      	; 0x1894 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	49 c0       	rjmp	.+146    	; 0x1926 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1894:	19 82       	std	Y+1, r1	; 0x01
    1896:	47 c0       	rjmp	.+142    	; 0x1926 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1898:	e6 e3       	ldi	r30, 0x36	; 54
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <GPIO_readPin+0xae>
    18ac:	55 95       	asr	r21
    18ae:	47 95       	ror	r20
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <GPIO_readPin+0xaa>
    18b4:	ca 01       	movw	r24, r20
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	90 70       	andi	r25, 0x00	; 0
    18ba:	88 23       	and	r24, r24
    18bc:	19 f0       	breq	.+6      	; 0x18c4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	31 c0       	rjmp	.+98     	; 0x1926 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18c4:	19 82       	std	Y+1, r1	; 0x01
    18c6:	2f c0       	rjmp	.+94     	; 0x1926 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18c8:	e3 e3       	ldi	r30, 0x33	; 51
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a9 01       	movw	r20, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_readPin+0xde>
    18dc:	55 95       	asr	r21
    18de:	47 95       	ror	r20
    18e0:	8a 95       	dec	r24
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_readPin+0xda>
    18e4:	ca 01       	movw	r24, r20
    18e6:	81 70       	andi	r24, 0x01	; 1
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	88 23       	and	r24, r24
    18ec:	19 f0       	breq	.+6      	; 0x18f4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	19 c0       	rjmp	.+50     	; 0x1926 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18f4:	19 82       	std	Y+1, r1	; 0x01
    18f6:	17 c0       	rjmp	.+46     	; 0x1926 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18f8:	e0 e3       	ldi	r30, 0x30	; 48
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a9 01       	movw	r20, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <GPIO_readPin+0x10e>
    190c:	55 95       	asr	r21
    190e:	47 95       	ror	r20
    1910:	8a 95       	dec	r24
    1912:	e2 f7       	brpl	.-8      	; 0x190c <GPIO_readPin+0x10a>
    1914:	ca 01       	movw	r24, r20
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	90 70       	andi	r25, 0x00	; 0
    191a:	88 23       	and	r24, r24
    191c:	19 f0       	breq	.+6      	; 0x1924 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1924:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1926:	89 81       	ldd	r24, Y+1	; 0x01
}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <GPIO_setupPortDirection+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <GPIO_setupPortDirection+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	84 30       	cpi	r24, 0x04	; 4
    194c:	90 f5       	brcc	.+100    	; 0x19b2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	3c 83       	std	Y+4, r19	; 0x04
    1956:	2b 83       	std	Y+3, r18	; 0x03
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	91 05       	cpc	r25, r1
    1960:	d1 f0       	breq	.+52     	; 0x1996 <GPIO_setupPortDirection+0x5e>
    1962:	2b 81       	ldd	r18, Y+3	; 0x03
    1964:	3c 81       	ldd	r19, Y+4	; 0x04
    1966:	22 30       	cpi	r18, 0x02	; 2
    1968:	31 05       	cpc	r19, r1
    196a:	2c f4       	brge	.+10     	; 0x1976 <GPIO_setupPortDirection+0x3e>
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	61 f0       	breq	.+24     	; 0x198c <GPIO_setupPortDirection+0x54>
    1974:	1e c0       	rjmp	.+60     	; 0x19b2 <GPIO_setupPortDirection+0x7a>
    1976:	2b 81       	ldd	r18, Y+3	; 0x03
    1978:	3c 81       	ldd	r19, Y+4	; 0x04
    197a:	22 30       	cpi	r18, 0x02	; 2
    197c:	31 05       	cpc	r19, r1
    197e:	81 f0       	breq	.+32     	; 0x19a0 <GPIO_setupPortDirection+0x68>
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	83 30       	cpi	r24, 0x03	; 3
    1986:	91 05       	cpc	r25, r1
    1988:	81 f0       	breq	.+32     	; 0x19aa <GPIO_setupPortDirection+0x72>
    198a:	13 c0       	rjmp	.+38     	; 0x19b2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    198c:	ea e3       	ldi	r30, 0x3A	; 58
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	80 83       	st	Z, r24
    1994:	0e c0       	rjmp	.+28     	; 0x19b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1996:	e7 e3       	ldi	r30, 0x37	; 55
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	80 83       	st	Z, r24
    199e:	09 c0       	rjmp	.+18     	; 0x19b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19a0:	e4 e3       	ldi	r30, 0x34	; 52
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	80 83       	st	Z, r24
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19aa:	e1 e3       	ldi	r30, 0x31	; 49
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <GPIO_writePort+0x6>
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <GPIO_writePort+0x8>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	84 30       	cpi	r24, 0x04	; 4
    19d4:	90 f5       	brcc	.+100    	; 0x1a3a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3c 83       	std	Y+4, r19	; 0x04
    19de:	2b 83       	std	Y+3, r18	; 0x03
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	d1 f0       	breq	.+52     	; 0x1a1e <GPIO_writePort+0x5e>
    19ea:	2b 81       	ldd	r18, Y+3	; 0x03
    19ec:	3c 81       	ldd	r19, Y+4	; 0x04
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	2c f4       	brge	.+10     	; 0x19fe <GPIO_writePort+0x3e>
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	61 f0       	breq	.+24     	; 0x1a14 <GPIO_writePort+0x54>
    19fc:	1e c0       	rjmp	.+60     	; 0x1a3a <GPIO_writePort+0x7a>
    19fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1a00:	3c 81       	ldd	r19, Y+4	; 0x04
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	81 f0       	breq	.+32     	; 0x1a28 <GPIO_writePort+0x68>
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	91 05       	cpc	r25, r1
    1a10:	81 f0       	breq	.+32     	; 0x1a32 <GPIO_writePort+0x72>
    1a12:	13 c0       	rjmp	.+38     	; 0x1a3a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a14:	eb e3       	ldi	r30, 0x3B	; 59
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	80 83       	st	Z, r24
    1a1c:	0e c0       	rjmp	.+28     	; 0x1a3a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a1e:	e8 e3       	ldi	r30, 0x38	; 56
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	80 83       	st	Z, r24
    1a26:	09 c0       	rjmp	.+18     	; 0x1a3a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a28:	e5 e3       	ldi	r30, 0x35	; 53
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	80 83       	st	Z, r24
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a32:	e2 e3       	ldi	r30, 0x32	; 50
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <GPIO_readPort+0x6>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <GPIO_readPort+0x8>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a56:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	84 30       	cpi	r24, 0x04	; 4
    1a5c:	90 f5       	brcc	.+100    	; 0x1ac2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3c 83       	std	Y+4, r19	; 0x04
    1a66:	2b 83       	std	Y+3, r18	; 0x03
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	91 05       	cpc	r25, r1
    1a70:	d1 f0       	breq	.+52     	; 0x1aa6 <GPIO_readPort+0x5e>
    1a72:	2b 81       	ldd	r18, Y+3	; 0x03
    1a74:	3c 81       	ldd	r19, Y+4	; 0x04
    1a76:	22 30       	cpi	r18, 0x02	; 2
    1a78:	31 05       	cpc	r19, r1
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <GPIO_readPort+0x3e>
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	61 f0       	breq	.+24     	; 0x1a9c <GPIO_readPort+0x54>
    1a84:	1e c0       	rjmp	.+60     	; 0x1ac2 <GPIO_readPort+0x7a>
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8a:	22 30       	cpi	r18, 0x02	; 2
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	81 f0       	breq	.+32     	; 0x1ab0 <GPIO_readPort+0x68>
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	83 30       	cpi	r24, 0x03	; 3
    1a96:	91 05       	cpc	r25, r1
    1a98:	81 f0       	breq	.+32     	; 0x1aba <GPIO_readPort+0x72>
    1a9a:	13 c0       	rjmp	.+38     	; 0x1ac2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a9c:	e9 e3       	ldi	r30, 0x39	; 57
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	0e c0       	rjmp	.+28     	; 0x1ac2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1aa6:	e6 e3       	ldi	r30, 0x36	; 54
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ab0:	e3 e3       	ldi	r30, 0x33	; 51
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1aba:	e0 e3       	ldi	r30, 0x30	; 48
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <Timer0_setCallBack>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <Timer0_setCallBack+0x6>
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	90 93 79 00 	sts	0x0079, r25
    1ae8:	80 93 78 00 	sts	0x0078, r24
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <__vector_9>:
/* global variable contain the ticks count of the normal timer */
unsigned char g_tick_normal=0;

/* Interrupt Service Routine for timer0 normal mode */
ISR(TIMER0_OVF_vect)
{
    1af6:	1f 92       	push	r1
    1af8:	0f 92       	push	r0
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	0f 92       	push	r0
    1afe:	11 24       	eor	r1, r1
    1b00:	8f 93       	push	r24
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
	g_tick_normal++;
    1b0a:	80 91 7b 00 	lds	r24, 0x007B
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	80 93 7b 00 	sts	0x007B, r24
	if(g_tick_normal == NUMBER_OF_OVERFLOWS_PER_SECOND)
    1b14:	80 91 7b 00 	lds	r24, 0x007B
    1b18:	8b 37       	cpi	r24, 0x7B	; 123
    1b1a:	39 f4       	brne	.+14     	; 0x1b2a <__vector_9+0x34>
	{
		g_tick_normal=0;
    1b1c:	10 92 7b 00 	sts	0x007B, r1
		g_seconds++;
    1b20:	80 91 7c 00 	lds	r24, 0x007C
    1b24:	8f 5f       	subi	r24, 0xFF	; 255
    1b26:	80 93 7c 00 	sts	0x007C, r24
	}
}
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	8f 91       	pop	r24
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	0f 90       	pop	r0
    1b36:	1f 90       	pop	r1
    1b38:	18 95       	reti

00001b3a <__vector_19>:
/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
    1b3a:	1f 92       	push	r1
    1b3c:	0f 92       	push	r0
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	0f 92       	push	r0
    1b42:	11 24       	eor	r1, r1
    1b44:	8f 93       	push	r24
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick_compare++;
    1b4e:	80 91 7a 00 	lds	r24, 0x007A
    1b52:	8f 5f       	subi	r24, 0xFF	; 255
    1b54:	80 93 7a 00 	sts	0x007A, r24
	if(g_tick_compare == NUMBER_OF_COMPARE_MTACHES_PER_SECOND)
    1b58:	80 91 7a 00 	lds	r24, 0x007A
    1b5c:	84 30       	cpi	r24, 0x04	; 4
    1b5e:	39 f4       	brne	.+14     	; 0x1b6e <__vector_19+0x34>
	{
		g_tick_compare = 0;
    1b60:	10 92 7a 00 	sts	0x007A, r1
		g_seconds++;
    1b64:	80 91 7c 00 	lds	r24, 0x007C
    1b68:	8f 5f       	subi	r24, 0xFF	; 255
    1b6a:	80 93 7c 00 	sts	0x007C, r24
	}
}
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	8f 91       	pop	r24
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <Timer0_Init>:
void Timer0_Init(const Timer0_ConfigType * Config_Ptr)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <Timer0_Init+0x6>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->mode==normal)
    1b8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b90:	80 81       	ld	r24, Z
    1b92:	88 23       	and	r24, r24
    1b94:	99 f4       	brne	.+38     	; 0x1bbc <Timer0_Init+0x3e>
	{
		TCNT0 =  Config_Ptr->init_value; // Set Timer initial value to 0
    1b96:	a2 e5       	ldi	r26, 0x52	; 82
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	92 81       	ldd	r25, Z+2	; 0x02
    1ba2:	8c 93       	st	X, r24
		TIMSK = (1 << TOIE0); // Enable Timer0 Overflow Interrupt
    1ba4:	e9 e5       	ldi	r30, 0x59	; 89
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	80 83       	st	Z, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
		 */
		TCCR0 = (1 << FOC0) | (Config_Ptr->prescale);
    1bac:	a3 e5       	ldi	r26, 0x53	; 83
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb4:	85 81       	ldd	r24, Z+5	; 0x05
    1bb6:	80 68       	ori	r24, 0x80	; 128
    1bb8:	8c 93       	st	X, r24
    1bba:	21 c0       	rjmp	.+66     	; 0x1bfe <Timer0_Init+0x80>
	}
	else if(Config_Ptr->mode==compare)
    1bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc0:	80 81       	ld	r24, Z
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	e1 f4       	brne	.+56     	; 0x1bfe <Timer0_Init+0x80>
	{
		TCNT0 = Config_Ptr->init_value;    // Set Timer initial value to 0
    1bc6:	a2 e5       	ldi	r26, 0x52	; 82
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e9 81       	ldd	r30, Y+1	; 0x01
    1bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bce:	81 81       	ldd	r24, Z+1	; 0x01
    1bd0:	92 81       	ldd	r25, Z+2	; 0x02
    1bd2:	8c 93       	st	X, r24
		OCR0 = Config_Ptr->compare_value; // Set Compare Value
    1bd4:	ac e5       	ldi	r26, 0x5C	; 92
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bda:	fa 81       	ldd	r31, Y+2	; 0x02
    1bdc:	83 81       	ldd	r24, Z+3	; 0x03
    1bde:	94 81       	ldd	r25, Z+4	; 0x04
    1be0:	8c 93       	st	X, r24
		TIMSK |= (1 << OCIE0); // Enable Timer0 Compare Interrupt
    1be2:	a9 e5       	ldi	r26, 0x59	; 89
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e9 e5       	ldi	r30, 0x59	; 89
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	82 60       	ori	r24, 0x02	; 2
    1bee:	8c 93       	st	X, r24
		/* Configure timer0 control register
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0 in this example so COM00=0 & COM01=0
		 */
		TCCR0 = (1 << FOC0) | (1 << WGM01) | (Config_Ptr->prescale);
    1bf0:	a3 e5       	ldi	r26, 0x53	; 83
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	85 81       	ldd	r24, Z+5	; 0x05
    1bfa:	88 68       	ori	r24, 0x88	; 136
    1bfc:	8c 93       	st	X, r24
	}
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <Timer0_deInit>:
void Timer0_deInit(void)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;//// Enable Timer0
    1c10:	e3 e5       	ldi	r30, 0x53	; 83
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	10 82       	st	Z, r1
	TIMSK=0;// Disable Timer0 Overflow Interrupt
    1c16:	e9 e5       	ldi	r30, 0x59	; 89
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	10 82       	st	Z, r1
}
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <TWI_init+0x6>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1c30:	e0 e2       	ldi	r30, 0x20	; 32
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	80 83       	st	Z, r24
	TWSR = 0x00;
    1c38:	e1 e2       	ldi	r30, 0x21	; 33
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    1c3e:	a2 e2       	ldi	r26, 0x22	; 34
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e9 81       	ldd	r30, Y+1	; 0x01
    1c44:	fa 81       	ldd	r31, Y+2	; 0x02
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1c4c:	e6 e5       	ldi	r30, 0x56	; 86
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	80 83       	st	Z, r24
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <TWI_start>:

void TWI_start(void)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1c66:	e6 e5       	ldi	r30, 0x56	; 86
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	84 ea       	ldi	r24, 0xA4	; 164
    1c6c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c6e:	e6 e5       	ldi	r30, 0x56	; 86
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	88 23       	and	r24, r24
    1c76:	dc f7       	brge	.-10     	; 0x1c6e <TWI_start+0x10>
}
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <TWI_stop>:

void TWI_stop(void)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1c86:	e6 e5       	ldi	r30, 0x56	; 86
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	84 e9       	ldi	r24, 0x94	; 148
    1c8c:	80 83       	st	Z, r24
}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	0f 92       	push	r0
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1ca0:	e3 e2       	ldi	r30, 0x23	; 35
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1ca8:	e6 e5       	ldi	r30, 0x56	; 86
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	84 e8       	ldi	r24, 0x84	; 132
    1cae:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1cb0:	e6 e5       	ldi	r30, 0x56	; 86
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	88 23       	and	r24, r24
    1cb8:	dc f7       	brge	.-10     	; 0x1cb0 <TWI_writeByte+0x1c>
}
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1cca:	e6 e5       	ldi	r30, 0x56	; 86
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	84 ec       	ldi	r24, 0xC4	; 196
    1cd0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1cd2:	e6 e5       	ldi	r30, 0x56	; 86
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	88 23       	and	r24, r24
    1cda:	dc f7       	brge	.-10     	; 0x1cd2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1cdc:	e3 e2       	ldi	r30, 0x23	; 35
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1cf0:	e6 e5       	ldi	r30, 0x56	; 86
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	84 e8       	ldi	r24, 0x84	; 132
    1cf6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1cf8:	e6 e5       	ldi	r30, 0x56	; 86
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	88 23       	and	r24, r24
    1d00:	dc f7       	brge	.-10     	; 0x1cf8 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1d02:	e3 e2       	ldi	r30, 0x23	; 35
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
}
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1d18:	e1 e2       	ldi	r30, 0x21	; 33
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	88 7f       	andi	r24, 0xF8	; 248
    1d20:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <UART_init+0x6>
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <UART_init+0x8>
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1d3c:	1a 82       	std	Y+2, r1	; 0x02
    1d3e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1d40:	eb e2       	ldi	r30, 0x2B	; 43
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1d48:	ea e2       	ldi	r30, 0x2A	; 42
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	88 e1       	ldi	r24, 0x18	; 24
    1d4e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (UCSRC&0xFC)|(Config_Ptr->char_size);
    1d50:	a0 e4       	ldi	r26, 0x40	; 64
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e0 e4       	ldi	r30, 0x40	; 64
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8c 77       	andi	r24, 0x7C	; 124
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	90 68       	ori	r25, 0x80	; 128
    1d60:	eb 81       	ldd	r30, Y+3	; 0x03
    1d62:	fc 81       	ldd	r31, Y+4	; 0x04
    1d64:	80 81       	ld	r24, Z
    1d66:	89 2b       	or	r24, r25
    1d68:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1d6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d6e:	83 81       	ldd	r24, Z+3	; 0x03
    1d70:	94 81       	ldd	r25, Z+4	; 0x04
    1d72:	a5 81       	ldd	r26, Z+5	; 0x05
    1d74:	b6 81       	ldd	r27, Z+6	; 0x06
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	aa 1f       	adc	r26, r26
    1d7c:	bb 1f       	adc	r27, r27
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	aa 1f       	adc	r26, r26
    1d84:	bb 1f       	adc	r27, r27
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	aa 1f       	adc	r26, r26
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	9c 01       	movw	r18, r24
    1d90:	ad 01       	movw	r20, r26
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	92 e1       	ldi	r25, 0x12	; 18
    1d96:	aa e7       	ldi	r26, 0x7A	; 122
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	cd 01       	movw	r24, r26
    1d9e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__udivmodsi4>
    1da2:	da 01       	movw	r26, r20
    1da4:	c9 01       	movw	r24, r18
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1dac:	e0 e4       	ldi	r30, 0x40	; 64
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	89 2f       	mov	r24, r25
    1db6:	99 27       	eor	r25, r25
    1db8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1dba:	e9 e2       	ldi	r30, 0x29	; 41
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	80 83       	st	Z, r24
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1ddc:	eb e2       	ldi	r30, 0x2B	; 43
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	80 72       	andi	r24, 0x20	; 32
    1de8:	90 70       	andi	r25, 0x00	; 0
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	b9 f3       	breq	.-18     	; 0x1ddc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1dee:	ec e2       	ldi	r30, 0x2C	; 44
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1e06:	eb e2       	ldi	r30, 0x2B	; 43
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	88 23       	and	r24, r24
    1e0e:	dc f7       	brge	.-10     	; 0x1e06 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1e10:	ec e2       	ldi	r30, 0x2C	; 44
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <UART_sendString+0x6>
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	0a c0       	rjmp	.+20     	; 0x1e40 <UART_sendString+0x24>
	/************************* Another Method *************************/
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	80 81       	ld	r24, Z
    1e32:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <UART_sendByte>
		Str++;
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	/************************* Another Method *************************/
	while(*Str != '\0')
    1e40:	e9 81       	ldd	r30, Y+1	; 0x01
    1e42:	fa 81       	ldd	r31, Y+2	; 0x02
    1e44:	80 81       	ld	r24, Z
    1e46:	88 23       	and	r24, r24
    1e48:	89 f7       	brne	.-30     	; 0x1e2c <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	/*******************************************************************/
}
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <UART_receiveString>:
/*
 * Description :
 * Receive the required string
 */
void UART_receiveString(uint8 *Str)
{
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <UART_receiveString+0xa>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <UART_receiveString+0xc>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	8b 83       	std	Y+3, r24	; 0x03
	uint16 i = 0;
    1e68:	1a 82       	std	Y+2, r1	; 0x02
    1e6a:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1e6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	89 01       	movw	r16, r18
    1e76:	08 0f       	add	r16, r24
    1e78:	19 1f       	adc	r17, r25
    1e7a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <UART_recieveByte>
    1e7e:	f8 01       	movw	r30, r16
    1e80:	80 83       	st	Z, r24
    1e82:	10 c0       	rjmp	.+32     	; 0x1ea4 <UART_receiveString+0x50>
	/* Receive the string*/
	while (Str[i] != '#') {
		i++;
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1e8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e90:	3c 81       	ldd	r19, Y+4	; 0x04
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	89 01       	movw	r16, r18
    1e98:	08 0f       	add	r16, r24
    1e9a:	19 1f       	adc	r17, r25
    1e9c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <UART_recieveByte>
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	80 83       	st	Z, r24
{
	uint16 i = 0;
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
	/* Receive the string*/
	while (Str[i] != '#') {
    1ea4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	f9 01       	movw	r30, r18
    1eae:	e8 0f       	add	r30, r24
    1eb0:	f9 1f       	adc	r31, r25
    1eb2:	80 81       	ld	r24, Z
    1eb4:	83 32       	cpi	r24, 0x23	; 35
    1eb6:	31 f7       	brne	.-52     	; 0x1e84 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	29 81       	ldd	r18, Y+1	; 0x01
    1ebe:	3a 81       	ldd	r19, Y+2	; 0x02
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	e2 0f       	add	r30, r18
    1ec4:	f3 1f       	adc	r31, r19
    1ec6:	10 82       	st	Z, r1
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	08 95       	ret

00001eda <__udivmodsi4>:
    1eda:	a1 e2       	ldi	r26, 0x21	; 33
    1edc:	1a 2e       	mov	r1, r26
    1ede:	aa 1b       	sub	r26, r26
    1ee0:	bb 1b       	sub	r27, r27
    1ee2:	fd 01       	movw	r30, r26
    1ee4:	0d c0       	rjmp	.+26     	; 0x1f00 <__udivmodsi4_ep>

00001ee6 <__udivmodsi4_loop>:
    1ee6:	aa 1f       	adc	r26, r26
    1ee8:	bb 1f       	adc	r27, r27
    1eea:	ee 1f       	adc	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	a2 17       	cp	r26, r18
    1ef0:	b3 07       	cpc	r27, r19
    1ef2:	e4 07       	cpc	r30, r20
    1ef4:	f5 07       	cpc	r31, r21
    1ef6:	20 f0       	brcs	.+8      	; 0x1f00 <__udivmodsi4_ep>
    1ef8:	a2 1b       	sub	r26, r18
    1efa:	b3 0b       	sbc	r27, r19
    1efc:	e4 0b       	sbc	r30, r20
    1efe:	f5 0b       	sbc	r31, r21

00001f00 <__udivmodsi4_ep>:
    1f00:	66 1f       	adc	r22, r22
    1f02:	77 1f       	adc	r23, r23
    1f04:	88 1f       	adc	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	1a 94       	dec	r1
    1f0a:	69 f7       	brne	.-38     	; 0x1ee6 <__udivmodsi4_loop>
    1f0c:	60 95       	com	r22
    1f0e:	70 95       	com	r23
    1f10:	80 95       	com	r24
    1f12:	90 95       	com	r25
    1f14:	9b 01       	movw	r18, r22
    1f16:	ac 01       	movw	r20, r24
    1f18:	bd 01       	movw	r22, r26
    1f1a:	cf 01       	movw	r24, r30
    1f1c:	08 95       	ret

00001f1e <__prologue_saves__>:
    1f1e:	2f 92       	push	r2
    1f20:	3f 92       	push	r3
    1f22:	4f 92       	push	r4
    1f24:	5f 92       	push	r5
    1f26:	6f 92       	push	r6
    1f28:	7f 92       	push	r7
    1f2a:	8f 92       	push	r8
    1f2c:	9f 92       	push	r9
    1f2e:	af 92       	push	r10
    1f30:	bf 92       	push	r11
    1f32:	cf 92       	push	r12
    1f34:	df 92       	push	r13
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	ca 1b       	sub	r28, r26
    1f48:	db 0b       	sbc	r29, r27
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	09 94       	ijmp

00001f56 <__epilogue_restores__>:
    1f56:	2a 88       	ldd	r2, Y+18	; 0x12
    1f58:	39 88       	ldd	r3, Y+17	; 0x11
    1f5a:	48 88       	ldd	r4, Y+16	; 0x10
    1f5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f60:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f62:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f64:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f66:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f68:	b9 84       	ldd	r11, Y+9	; 0x09
    1f6a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f6c:	df 80       	ldd	r13, Y+7	; 0x07
    1f6e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f70:	fd 80       	ldd	r15, Y+5	; 0x05
    1f72:	0c 81       	ldd	r16, Y+4	; 0x04
    1f74:	1b 81       	ldd	r17, Y+3	; 0x03
    1f76:	aa 81       	ldd	r26, Y+2	; 0x02
    1f78:	b9 81       	ldd	r27, Y+1	; 0x01
    1f7a:	ce 0f       	add	r28, r30
    1f7c:	d1 1d       	adc	r29, r1
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	ed 01       	movw	r28, r26
    1f8a:	08 95       	ret

00001f8c <_exit>:
    1f8c:	f8 94       	cli

00001f8e <__stop_program>:
    1f8e:	ff cf       	rjmp	.-2      	; 0x1f8e <__stop_program>
